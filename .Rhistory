gather_celltype_DEGs(celltype_correspondence = celltype_corr,Nperms=3)
load("C:/Users/salma/Desktop/test_bulk/Allen_Endo/Endo/DE_downsampling/10samples/10_1/DEout10_1.RData")
DEout_10
DEout_10$celltype_all_genes
DEout_10$celltype_all_genes$Pvalue
celltype_corr[["Endo"]]
DEout_10$celltype_all_genes[[celltype_corr[["Endo"]][1]]]
#' Collate DEGs detected in DGE analysis outputs, across all celltypes in a dataset (datasets/DGE analysis outputs should have common celltypes as specified below)
#' @param celltype_correspondence list of different names specifying each cell type
#' @param pvalue the cut-off p-value used to select DEGs
#' @param Nperms number of permutations of DGE analysis outputs for each sample
#' @param output_path path storing the down-sampled DGE analysis for each single-cell dataset, generated for bulk analysis
#' Saves combined list of DEGs (across all cell types) in a subdirectory inside the dataset directory
gather_celltype_DEGs <- function(celltype_correspondence,
pvalue=0.05,
Nperms=20,
output_path=getwd()){
# loop through datasets
j <- 0
for (dataset in list.dirs(output_path, recursive=FALSE, full.names=FALSE)) {
j <- j + 1
print(paste0("Gathering data for ", dataset))
# base dataset path
base_dataset <- file.path(output_path, dataset)
# create path
target_base <- file.path(base_dataset, "Overall/DE_downsampling")
dir.create(target_base, recursive=TRUE, showWarnings=FALSE)
# loop through each cell type
for (standard_celltype in names(celltype_correspondence)) {
# sampling point paths
celltype_path <- file.path(base_dataset, standard_celltype, "DE_downsampling")
downsampled_folders <- list.dirs(celltype_path, recursive=FALSE, full.names=FALSE)
# loop through sampling points
for (sample_samples in downsampled_folders) {
# sample
sample <- as.numeric(gsub("[^0-9]", "", sample_samples))
print(paste0("Processing ", sample_samples, "..."))
cell_sample_path <- file.path(celltype_path, sample_samples)
# loop through permutations
for (perm in 1:Nperms) {
# list to store DEGs
DEGs <- c()
sample_perm <- paste0(sample, "_", perm)
# create directory in overall folder
target_sample_perm <- file.path(target_base, sample_samples, sample_perm)
dir.create(target_sample_perm, recursive=TRUE, showWarnings=FALSE)
# check if the cell type directory exists
cell_sample_permpath <- file.path(cell_sample_path, sample_perm)
deg_file <- file.path(cell_sample_permpath, paste0("DEout", sample_perm, ".RData"))
if (file.exists(deg_file)) {
load(deg_file)
# get DEGs
DEGs <- c(DEGs, subset(eval(as.name(paste0("DEout_", sample)))$celltype_all_genes[[celltype_correspondence[[standard_celltype]][j]]], PValue <= pvalue)$name)
DEGs <- unique(DEGs)
}
# save DEGs
save(DEGs, file = file.path(target_sample_perm, paste0("DEout", sample_perm, ".RData")))
}
}
}
}
}
gather_celltype_DEGs(celltype_correspondence = celltype_corr,Nperms=3)
getwd()
prop_bulk_DEGs_sc(bulkDE,c(10,15,25,35,40,50,55,65,75,80))
library(stringr)
prop_bulk_DEGs_sc(bulkDE,c(10,15,25,35,40,50,55,65,75,80))
library(ggplot2)
library(RColorBrewer)
library(grDevices)
library(cowplot)
library(utils)
prop_bulk_DEGs_sc(bulkDE,c(10,15,25,35,40,50,55,65,75,80))
### TESTING PACKAGE
## TESTING ACTUAL PACKAGE
setwd("C:/Users/salma/Power_Analysis_package")
devtools::document()
#usethis::use_vignette("poweranalysis")
devtools::load_all()
devtools::install()
devtools::check()
getwd()
list.files(all.files=TRUE,recursive = TRUE)
tempdir()
getwd()
devtools::build()
## TESTING ACTUAL PACKAGE
setwd("C:/Users/salma/Power_Analysis_package")
devtools::document()
#usethis::use_vignette("poweranalysis")
devtools::load_all()
devtools::install()
devtools::check()
devtools::build()
pprint
length(str_split("Allen_Endo","_")[[1]])
sub("^\\w", toupper(substring("Allen_Endo", 1, 1)), "Allen_Endo")
sub("^\\w", toupper(substring("allen_endo", 1, 1)), "allen_endo")
str_split(sub("^\\w", toupper(substring("Micro", 1, 1)), "Micro"),"_")[[1]]
test<-"Micro"
test[-length(test)]
test<-"Allen_Endo"
test[-length(test)]
str_split(sub("^\\w", toupper(substring(test, 1, 1)), test),"_")[[1]]
a<-str_split(sub("^\\w", toupper(substring(test, 1, 1)), test),"_")[[1]]
a[-length(a)]
tail(a,1)
paste0(paste("Allen",collapse=" ")," (","Endo",")")
list.dirs(getwd())
getwd()
setwd("../Desktop/test_bulk/")
list.dirs()
list.dirs(recursive = F)
str_split("10_1","_")
str_split("10_1","_")[[1]][2]
str_split("10_3","_")[[1]][2]
# Define global variables
utils::globalVariables(c("DEGs","numSamples","pctDEGs"))
#' Obtain overall percentage overlap between DEGs from bulk data (DE across all tissues) and various scRNA-seq datasets, across all common cell types
#' @importFrom stringr str_split
#' @importFrom utils tail
#' @importFrom RColorBrewer brewer.pal
#' @importFrom grDevices colorRampPalette
#' @importFrom ggplot2 ggplot labs theme aes element_text geom_boxplot position_dodge2 scale_y_continuous guides guide_legend scale_fill_manual scale_alpha
#' @importFrom cowplot theme_cowplot
#' @param bulkDE DGE analysis output for a bulk RNA-seq dataset: rows (rownames) should be the genes, columns should be tissues, and entries should be significance levels
#' @param range_downsampled vector or list containing values which the data will be downsampled at, in ascending order
#' @param bulk_cutoff percentage (proportion), specified so that we select DEGs common across >=bulk_cutoff of the tissues in the Bulk dataset
#' @param pvalue the cut-off p-value used to select DEGs (for bulk data)
#' @param fontsize_axislabels font size for axis labels in plot
#' @param fontsize_axisticks font size for axis tick labels in plot
#' @param fontsize_title font size for plot title
#' @param fontsize_legendlabels font size for legend labels in plot
#' @param fontsize_legendtitle font size for legend title in plot
#' @param plot_title plot title
#' @param output_path path storing the down-sampled DGE analysis outputs for each dataset
#' Saves plot showing percentage DEGs from bulk data found in each scRNA-seq dataset, in the appropriate directory
prop_bulk_DEGs_sc <- function(bulkDE,
range_downsampled,
bulk_cutoff=0.9,
pvalue=0.05,
fontsize_axislabels=12,
fontsize_axisticks=9,
fontsize_title=14,
fontsize_legendlabels=9,
fontsize_legendtitle=9,
plot_title="placeholder",
output_path=getwd()){
# default placeholder
if(plot_title=="placeholder"){
plot_title="Percentage DEGs from Bulk data detected when down-sampling scRNA-seq datasets (across all cell types)"
}
## get DEGs significant in bulk data across at least bulk_cutoff of the tissues
# deal with NA rows
bulkDE[is.na(bulkDE)]<-100
# total number of tissues
numTissues <- length(bulkDE)
# get DEGs
bulk_DEGs <- c()
for(rownum in 1:nrow(bulkDE)){
if(sum(1*(bulkDE[rownum,]<pvalue))>=round(bulk_cutoff*numTissues)){
bulk_DEGs <- c(bulk_DEGs,rownames(bulkDE[rownum,]))
}
}
# get DEG names
bulk_DEGs <- sapply(strsplit(bulk_DEGs,".",1), `[`, 1)
## get proportion of DEGs
# lists to hold each var
Dataset <- c()
NumSamples <- c()
Perm <- c()
PctDEGs <- c()
for(dataset in list.dirs(output_path,recursive=F,full.names=F)){
print(paste0("Downsampling ",dataset))
# go inside dataset directory overall folder, downsampling folder
data_dir <- file.path(output_path, dataset, "Overall/DE_downsampling")
downsampled_folders <- list.dirs(data_dir, recursive=FALSE, full.names=FALSE)
#setwd(data_dir)
# go inside numSamples, if exists
for(sample_samples in downsampled_folders){
sample <- as.numeric(gsub("[^0-9]", "", sample_samples))
print(paste0("Processing ", sample_samples, "..."))
# perms
data_sample_dir <- file.path(data_dir,sample_samples)
# check if this sample point exists
if(dir.exists(data_sample_dir)){
# go into directory
#setwd(data_sample_dir)
# loop through perms
for(sample_perm in list.dirs(data_sample_dir,recursive=F,full.names=F)){
data_sample_perm_dir <- file.path(data_sample_dir,sample_perm)
# go into each perm
#setwd(data_sample_perm_dir)
# load DGE analysis output for this permutation
load(paste0("DEout",sample_perm,".RData"))
# get % DEGs from Bulk Data DE here, add to vars, name dataset appropriately
Dataset <- c(Dataset, dataset)
NumSamples <- c(NumSamples, sample)
Perm <- c(Perm, str_split(sample_perm,"_")[[1]][2])
PctDEGs <- c(PctDEGs, sum((bulk_DEGs%in%DEGs)*1)/length(bulk_DEGs))
}
}
}
}
# put together df
DEGs_df <- data.frame(Dataset)
DEGs_df$numSamples <- NumSamples
DEGs_df$perm <- Perm
DEGs_df$pctDEGs <- PctDEGs
# function to select colours appropriately for boxplots
generate_color_palette <- function(N, palette = "Set1") {
max_colors <- 9  # the maximum number of colors available for the chosen palette
if (N <= max_colors) {
return(brewer.pal(N, palette))
}else{
# set seed
set.seed(123)
# create a continuous range of colors from the chosen palette
continuous_palette <- colorRampPalette(brewer.pal(max_colors, palette))
# generate N colors from the continuous range
return(continuous_palette(N))
}
}
# create and return plot
propDEGs_overall.plot <- ggplot(DEGs_df,aes(x=factor(numSamples),y=100*pctDEGs))+
geom_boxplot(outlier.shape=NA,aes(fill=factor(Dataset)),position = position_dodge2(width = 1, preserve = "single"))+
scale_y_continuous(labels = function(x) round(x))+
guides(fill = guide_legend(label.format = function(x) round(as.numeric(x))))+
theme_cowplot()+
scale_fill_manual(values=generate_color_palette(length(list.dirs(output_path,recursive=F,full.names=F)),palette="Set1"))+
labs(y="% DEGs", x="Number of Samples", fill="Dataset",title="Percentage DEGs from Bulk data detected when down-sampling scRNA-seq datasets (across all cell types)")+
scale_alpha(guide = 'none')+
theme(axis.title = element_text(size = fontsize_axislabels),
axis.text.x = element_text(size = fontsize_axisticks),
axis.text.y = element_text(size = fontsize_axisticks),
plot.title = element_text(size = fontsize_title),
legend.text = element_text(size = fontsize_legendlabels),
legend.title = element_text(size = fontsize_legendtitle))
# save plot
ggsave(file.path(output_path,"prop_bulk_DEGs_sc.png"), propDEGs_overall.plot, width=40, height=15, units="cm", bg="white")
ggsave(file.path(output_path,"prop_bulk_DEGs_sc.pdf"), propDEGs_overall.plot, width=40, height=15, units="cm", bg="white")
}
getwd()
# Define global variables
utils::globalVariables(c("DEGs","numSamples","pctDEGs"))
#' Obtain overall percentage overlap between DEGs from bulk data (DE across all tissues) and various scRNA-seq datasets, across all common cell types
#' @importFrom stringr str_split
#' @importFrom utils tail
#' @importFrom RColorBrewer brewer.pal
#' @importFrom grDevices colorRampPalette
#' @importFrom ggplot2 ggplot labs theme aes element_text geom_boxplot position_dodge2 scale_y_continuous guides guide_legend scale_fill_manual scale_alpha
#' @importFrom cowplot theme_cowplot
#' @param bulkDE DGE analysis output for a bulk RNA-seq dataset: rows (rownames) should be the genes, columns should be tissues, and entries should be significance levels
#' @param bulk_cutoff percentage (proportion), specified so that we select DEGs common across >=bulk_cutoff of the tissues in the Bulk dataset
#' @param pvalue the cut-off p-value used to select DEGs (for bulk data)
#' @param fontsize_axislabels font size for axis labels in plot
#' @param fontsize_axisticks font size for axis tick labels in plot
#' @param fontsize_title font size for plot title
#' @param fontsize_legendlabels font size for legend labels in plot
#' @param fontsize_legendtitle font size for legend title in plot
#' @param plot_title plot title
#' @param output_path path storing the down-sampled DGE analysis outputs for each dataset
#' Saves plot showing percentage DEGs from bulk data found in each scRNA-seq dataset, in the appropriate directory
prop_bulk_DEGs_sc <- function(bulkDE,
bulk_cutoff=0.9,
pvalue=0.05,
fontsize_axislabels=12,
fontsize_axisticks=9,
fontsize_title=14,
fontsize_legendlabels=9,
fontsize_legendtitle=9,
plot_title="placeholder",
output_path=getwd()){
# default placeholder
if(plot_title=="placeholder"){
plot_title="Percentage DEGs from Bulk data detected when down-sampling scRNA-seq datasets (across all cell types)"
}
## get DEGs significant in bulk data across at least bulk_cutoff of the tissues
# deal with NA rows
bulkDE[is.na(bulkDE)]<-100
# total number of tissues
numTissues <- length(bulkDE)
# get DEGs
bulk_DEGs <- c()
for(rownum in 1:nrow(bulkDE)){
if(sum(1*(bulkDE[rownum,]<pvalue))>=round(bulk_cutoff*numTissues)){
bulk_DEGs <- c(bulk_DEGs,rownames(bulkDE[rownum,]))
}
}
# get DEG names
bulk_DEGs <- sapply(strsplit(bulk_DEGs,".",1), `[`, 1)
## get proportion of DEGs
# lists to hold each var
Dataset <- c()
NumSamples <- c()
Perm <- c()
PctDEGs <- c()
for(dataset in list.dirs(output_path,recursive=F,full.names=F)){
print(paste0("Downsampling ",dataset))
# go inside dataset directory overall folder, downsampling folder
data_dir <- file.path(output_path, dataset, "Overall/DE_downsampling")
downsampled_folders <- list.dirs(data_dir, recursive=FALSE, full.names=FALSE)
#setwd(data_dir)
# go inside numSamples, if exists
for(sample_samples in downsampled_folders){
sample <- as.numeric(gsub("[^0-9]", "", sample_samples))
print(paste0("Processing ", sample_samples, "..."))
# perms
data_sample_dir <- file.path(data_dir,sample_samples)
# check if this sample point exists
if(dir.exists(data_sample_dir)){
# go into directory
#setwd(data_sample_dir)
# loop through perms
for(sample_perm in list.dirs(data_sample_dir,recursive=F,full.names=F)){
data_sample_perm_dir <- file.path(data_sample_dir,sample_perm)
# go into each perm
#setwd(data_sample_perm_dir)
# load DGE analysis output for this permutation
load(paste0("DEout",sample_perm,".RData"))
# get % DEGs from Bulk Data DE here, add to vars, name dataset appropriately
Dataset <- c(Dataset, dataset)
NumSamples <- c(NumSamples, sample)
Perm <- c(Perm, str_split(sample_perm,"_")[[1]][2])
PctDEGs <- c(PctDEGs, sum((bulk_DEGs%in%DEGs)*1)/length(bulk_DEGs))
}
}
}
}
# put together df
DEGs_df <- data.frame(Dataset)
DEGs_df$numSamples <- NumSamples
DEGs_df$perm <- Perm
DEGs_df$pctDEGs <- PctDEGs
# function to select colours appropriately for boxplots
generate_color_palette <- function(N, palette = "Set1") {
max_colors <- 9  # the maximum number of colors available for the chosen palette
if (N <= max_colors) {
return(brewer.pal(N, palette))
}else{
# set seed
set.seed(123)
# create a continuous range of colors from the chosen palette
continuous_palette <- colorRampPalette(brewer.pal(max_colors, palette))
# generate N colors from the continuous range
return(continuous_palette(N))
}
}
# create and return plot
propDEGs_overall.plot <- ggplot(DEGs_df,aes(x=factor(numSamples),y=100*pctDEGs))+
geom_boxplot(outlier.shape=NA,aes(fill=factor(Dataset)),position = position_dodge2(width = 1, preserve = "single"))+
scale_y_continuous(labels = function(x) round(x))+
guides(fill = guide_legend(label.format = function(x) round(as.numeric(x))))+
theme_cowplot()+
scale_fill_manual(values=generate_color_palette(length(list.dirs(output_path,recursive=F,full.names=F)),palette="Set1"))+
labs(y="% DEGs", x="Number of Samples", fill="Dataset",title="Percentage DEGs from Bulk data detected when down-sampling scRNA-seq datasets (across all cell types)")+
scale_alpha(guide = 'none')+
theme(axis.title = element_text(size = fontsize_axislabels),
axis.text.x = element_text(size = fontsize_axisticks),
axis.text.y = element_text(size = fontsize_axisticks),
plot.title = element_text(size = fontsize_title),
legend.text = element_text(size = fontsize_legendlabels),
legend.title = element_text(size = fontsize_legendtitle))
# save plot
ggsave(file.path(output_path,"prop_bulk_DEGs_sc.png"), propDEGs_overall.plot, width=40, height=15, units="cm", bg="white")
ggsave(file.path(output_path,"prop_bulk_DEGs_sc.pdf"), propDEGs_overall.plot, width=40, height=15, units="cm", bg="white")
}
prop_bulk_DEGs_sc(bulkDE)
# Define global variables
utils::globalVariables(c("DEGs","numSamples","pctDEGs"))
#' Obtain overall percentage overlap between DEGs from bulk data (DE across all tissues) and various scRNA-seq datasets, across all common cell types
#' @importFrom stringr str_split
#' @importFrom utils tail
#' @importFrom RColorBrewer brewer.pal
#' @importFrom grDevices colorRampPalette
#' @importFrom ggplot2 ggplot labs theme aes element_text geom_boxplot position_dodge2 scale_y_continuous guides guide_legend scale_fill_manual scale_alpha
#' @importFrom cowplot theme_cowplot
#' @param bulkDE DGE analysis output for a bulk RNA-seq dataset: rows (rownames) should be the genes, columns should be tissues, and entries should be significance levels
#' @param bulk_cutoff percentage (proportion), specified so that we select DEGs common across >=bulk_cutoff of the tissues in the Bulk dataset
#' @param pvalue the cut-off p-value used to select DEGs (for bulk data)
#' @param fontsize_axislabels font size for axis labels in plot
#' @param fontsize_axisticks font size for axis tick labels in plot
#' @param fontsize_title font size for plot title
#' @param fontsize_legendlabels font size for legend labels in plot
#' @param fontsize_legendtitle font size for legend title in plot
#' @param plot_title plot title
#' @param output_path path storing the down-sampled DGE analysis outputs for each dataset
#' Saves plot showing percentage DEGs from bulk data found in each scRNA-seq dataset, in the appropriate directory
prop_bulk_DEGs_sc <- function(bulkDE,
bulk_cutoff=0.9,
pvalue=0.05,
fontsize_axislabels=12,
fontsize_axisticks=9,
fontsize_title=14,
fontsize_legendlabels=9,
fontsize_legendtitle=9,
plot_title="placeholder",
output_path=getwd()){
# default placeholder
if(plot_title=="placeholder"){
plot_title="Percentage DEGs from Bulk data detected when down-sampling scRNA-seq datasets (across all cell types)"
}
## get DEGs significant in bulk data across at least bulk_cutoff of the tissues
# deal with NA rows
bulkDE[is.na(bulkDE)]<-100
# total number of tissues
numTissues <- length(bulkDE)
# get DEGs
bulk_DEGs <- c()
for(rownum in 1:nrow(bulkDE)){
if(sum(1*(bulkDE[rownum,]<pvalue))>=round(bulk_cutoff*numTissues)){
bulk_DEGs <- c(bulk_DEGs,rownames(bulkDE[rownum,]))
}
}
# get DEG names
bulk_DEGs <- sapply(strsplit(bulk_DEGs,".",1), `[`, 1)
## get proportion of DEGs
# lists to hold each var
Dataset <- c()
NumSamples <- c()
Perm <- c()
PctDEGs <- c()
for(dataset in list.dirs(output_path,recursive=F,full.names=F)){
print(paste0("Downsampling ",dataset))
# go inside dataset directory overall folder, downsampling folder
data_dir <- file.path(output_path, dataset, "Overall/DE_downsampling")
downsampled_folders <- list.dirs(data_dir, recursive=FALSE, full.names=FALSE)
#setwd(data_dir)
# go inside numSamples, if exists
for(sample_samples in downsampled_folders){
sample <- as.numeric(gsub("[^0-9]", "", sample_samples))
print(paste0("Processing ", sample_samples, "..."))
# perms
data_sample_dir <- file.path(data_dir,sample_samples)
# check if this sample point exists
if(dir.exists(data_sample_dir)){
# go into directory
#setwd(data_sample_dir)
# loop through perms
for(sample_perm in list.dirs(data_sample_dir,recursive=F,full.names=F)){
data_sample_perm_dir <- file.path(data_sample_dir,sample_perm)
# go into each perm
#setwd(data_sample_perm_dir)
# load DGE analysis output for this permutation
load(file.path(data_sample_perm_dir,paste0("DEout",sample_perm,".RData")))
# get % DEGs from Bulk Data DE here, add to vars, name dataset appropriately
Dataset <- c(Dataset, dataset)
NumSamples <- c(NumSamples, sample)
Perm <- c(Perm, str_split(sample_perm,"_")[[1]][2])
PctDEGs <- c(PctDEGs, sum((bulk_DEGs%in%DEGs)*1)/length(bulk_DEGs))
}
}
}
}
# put together df
DEGs_df <- data.frame(Dataset)
DEGs_df$numSamples <- NumSamples
DEGs_df$perm <- Perm
DEGs_df$pctDEGs <- PctDEGs
# function to select colours appropriately for boxplots
generate_color_palette <- function(N, palette = "Set1") {
max_colors <- 9  # the maximum number of colors available for the chosen palette
if (N <= max_colors) {
return(brewer.pal(N, palette))
}else{
# set seed
set.seed(123)
# create a continuous range of colors from the chosen palette
continuous_palette <- colorRampPalette(brewer.pal(max_colors, palette))
# generate N colors from the continuous range
return(continuous_palette(N))
}
}
# create and return plot
propDEGs_overall.plot <- ggplot(DEGs_df,aes(x=factor(numSamples),y=100*pctDEGs))+
geom_boxplot(outlier.shape=NA,aes(fill=factor(Dataset)),position = position_dodge2(width = 1, preserve = "single"))+
scale_y_continuous(labels = function(x) round(x))+
guides(fill = guide_legend(label.format = function(x) round(as.numeric(x))))+
theme_cowplot()+
scale_fill_manual(values=generate_color_palette(length(list.dirs(output_path,recursive=F,full.names=F)),palette="Set1"))+
labs(y="% DEGs", x="Number of Samples", fill="Dataset",title="Percentage DEGs from Bulk data detected when down-sampling scRNA-seq datasets (across all cell types)")+
scale_alpha(guide = 'none')+
theme(axis.title = element_text(size = fontsize_axislabels),
axis.text.x = element_text(size = fontsize_axisticks),
axis.text.y = element_text(size = fontsize_axisticks),
plot.title = element_text(size = fontsize_title),
legend.text = element_text(size = fontsize_legendlabels),
legend.title = element_text(size = fontsize_legendtitle))
# save plot
ggsave(file.path(output_path,"prop_bulk_DEGs_sc.png"), propDEGs_overall.plot, width=40, height=15, units="cm", bg="white")
ggsave(file.path(output_path,"prop_bulk_DEGs_sc.pdf"), propDEGs_overall.plot, width=40, height=15, units="cm", bg="white")
}
prop_bulk_DEGs_sc(bulkDE)
### TESTING PACKAGE
## TESTING ACTUAL PACKAGE
setwd("C:/Users/salma/Power_Analysis_package")
devtools::document()
#usethis::use_vignette("poweranalysis")
devtools::load_all()
devtools::install()
devtools::check()
c("hi",1)
## TESTING ACTUAL PACKAGE
setwd("C:/Users/salma/Power_Analysis_package")
devtools::document()
#usethis::use_vignette("poweranalysis")
devtools::load_all()
devtools::install()
devtools::check()
devtools::build()
getwd()
?poweranalysis
