if(!is.character(y))
stop("Please input a character for y indicating the column holding the response variable information")
if(is.null(SCE[[y]]))
stop(paste0("The inputted y value: ",y,
" is not present in the SCE object, perhaps check for spelling is correct"))
}
else{
#if y not specified take last value in design matrix
y <- design_txt[[length(design_txt)]]
if(is.null(SCE[[y]]))
stop(paste0("The inputted y value taken from your formula (the last variable): ",y,
" is not present in the SCE object, perhaps check for spelling is correct"))
}
#only check region if user is setting it themselves
if(region!="single_region"){
if(!is.character(region))
stop("Please input a character for region indicating the column holding the variable information")
if(is.null(SCE[[region]]))
stop(paste0("The inputted region value: ",region,
" is not present in the SCE object, perhaps check for spelling is correct"))
}
if(!is.null(coef)){
if(!coef %in% unique(SCE[[y]]))
stop(paste0("The inputted coef value: ",coef,
" is not present in y ", y,
" in the SCE object, perhaps check for spelling is correct"))
}
if(!is.null(control)){
if(!control %in% unique(SCE[[y]]))
stop(paste0("The inputted control value: ",control,
" is not present in y ", y,
" in the SCE object, perhaps check for spelling is correct"))
}
if(!is.character(pseudobulk_ID))
stop("Please input a character for pseudobulk_ID indicating the column holding the patient identifier")
if(is.null(SCE[[pseudobulk_ID]]))
stop(paste0("The inputted patient_ID value: ",pseudobulk_ID,
" is not present in the SCE object, perhaps check for spelling is correct"))
if(!is.character(pval_adjust_method))
stop("Please input a character for the pval_adjust_method indicating the method to be used")
if(class(adj_pval)[1]!="numeric")
stop("Please input a 0-1 range number for the adj_pval indicating the cut off of significance for the differential expression analysis")
if(adj_pval<0|adj_pval>1)
stop("Please input a 0-1 range number for the adj_pval indicating the cut off of significance for the differential expression analysis")
#if the user doesn't want to save plots from DE analysis they can pass in a false for the folder input parameter
if(!isFALSE(folder))
if(!is.character(folder))
stop("For the folder input variable, please pass a directory for the plots to be saved in, go with the default or pass in FALSE stop plotting")
if(!is.logical(verbose))
stop("Please input TRUE/FALSE for verbose")
if(!is.logical(rmv_zero_count_genes))
stop("Please input TRUE/FALSE for rmv_zero_count_genes")
}
#sc_cell_type_de function
sc_cell_type_de(sce)
View(sce)
install.packages("Hmisc")
install.packages("Hmisc")
library(Hmisc)
library(data.table)
library(reshape2)
library(cowplot)
library(viridis)
#sc_cell_type_de function
validate_input_parameters_de()
#sc_cell_type_de function
validate_input_parameters_de
synLogin(authToken="")
#Download the Tsai dataset
library(synapser)
install.packages("synapser", repos = c("http://ran.synapse.org", "http://cran.fhcrc.org"))
install.packages("synapser", repos = c("http://ran.synapse.org", "http://cran.fhcrc.org"))
install.packages("synapser")
#Download the Tsai dataset
library(synapser)
install.packages("synapser")
install.packages("synapser", repos = c("http://ran.synapse.org", "http://cran.fhcrc.org"))
options(repos = c("http://ran.synapse.org", "http://cran.fhcrc.org"))
install.packages("synapser")
library(gridExtra)
library(foreign)
library(MASS)
library(stringr)
library(plotly)
library(readr)
library(knitr)
sc_cell_type_de(sce)
170 + 102 + 133 + 227 + 129
170 + 102 + 133 + 227 + 152
170 + 102 + 133 + 227 + 152 + 170
mm_lefse
170 + 102 + 133 + 227 + 152 + 172 + 105
170 + 102 + 133 + 227 + 152 + 172 + 102 + 155
merged_df <- merge(melted_df, metadata, by.x = "SampleID", by.y = "SampleID")
##Heatmap
library(pheatmap)
metabolic_mean <- read_csv(file.choose())
metabolic_mean <- subset(metabolic_mean, select = -c(SUPER_PATHWAY, SUB_PATHWAY))
significant_data <- metabolic_mean %>% filter(BIOCHEMICAL %in% significant_metabolites)
metabolic_mean <- subset(metabolic_mean, select = -c(SUPER_PATHWAY, SUB_PATHWAY))
View(metabolic_mean)
significant_data <- metabolic_mean %>% filter(BIOCHEMICAL %in% significant_metabolites)
library(tidyverse)
library(readr)
library(reshape2)
library(stats)
library(agricolae)
library(dplyr)
library(ggplot2)
data_matrix <- significant_data %>%
select(-BIOCHEMICAL) %>%
mutate(across(everything(), as.numeric))
significant_data <- metabolic_mean %>% filter(BIOCHEMICAL %in% significant_metabolites)
##Process data
new_col_names <- c("BIOCHEMICAL", "SUPER_PATHWAY", "SUB_PATHWAY",
rep("NC", 6), rep("HFD", 6), rep("HFD_R", 6),
rep("HFD_M", 6), rep("HFD_S", 6), rep("HFD_RMS", 6))
##Volcano plot
metabolic <- read_csv(file.choose())
data = metabolic
colnames(data) <- new_col_names
data <- subset(data, select = -c(SUPER_PATHWAY, SUB_PATHWAY))
##ANOVA test
# Initialize a list to store ANOVA results
anova_results <- list()
significant_metabolites <- c()
for (i in 1:nrow(data)) {
row_data <- data[i, ]
metabolite <- row_data$BIOCHEMICAL
# Extract the values for each group
nc_values <- as.numeric(row_data[grep("^NC", names(row_data))])
hfd_values <- as.numeric(row_data[grep("^HFD$", names(row_data))])
hfd_r_values <- as.numeric(row_data[grep("^HFD_R", names(row_data))])
hfd_m_values <- as.numeric(row_data[grep("^HFD_M", names(row_data))])
hfd_s_values <- as.numeric(row_data[grep("^HFD_S", names(row_data))])
hfd_rms_values <- as.numeric(row_data[grep("^HFD_RMS", names(row_data))])
# Combine the values and create a group factor
values <- c(nc_values, hfd_values, hfd_r_values, hfd_m_values, hfd_s_values, hfd_rms_values)
groups <- factor(rep(c("NC", "HFD", "HFD_R", "HFD_M", "HFD_S", "HFD_RMS"),
times = c(length(nc_values), length(hfd_values), length(hfd_r_values),
length(hfd_m_values), length(hfd_s_values), length(hfd_rms_values))))
# Perform ANOVA
aov_result <- aov(values ~ groups)
anova_summary <- summary(aov_result)
anova_results[[metabolite]] <- anova_summary
# Extract p-value
p_value <- anova_summary[[1]]$`Pr(>F)`[1]
#apply
p_value_adjust <- p.adjust(p_value, method = "BH")
if (!is.na(p_value_adjust) && p_value_adjust < 0.0005) {
significant_metabolites <- c(significant_metabolites, metabolite)
}
}
significant_metabolites
significant_data <- metabolic_mean %>% filter(BIOCHEMICAL %in% significant_metabolites)
data_matrix <- significant_data %>%
select(-BIOCHEMICAL) %>%
mutate(across(everything(), as.numeric))
# Check for any conversion issues (NAs introduced by coercion)
if (any(is.na(data_matrix))) {
# Handle missing values: replace NAs with row means (or another strategy)
data_matrix[is.na(data_matrix)] <- rowMeans(data_matrix, na.rm = TRUE)
}
rownames(data_matrix) <- significant_data$BIOCHEMICAL
metabolic_mean <- read_csv(file.choose())
significant_data <- metabolic_mean %>% filter(BIOCHEMICAL %in% significant_metabolites)
data_matrix <- significant_data %>%
select(-BIOCHEMICAL) %>%
mutate(across(everything(), as.numeric))
# Check for any conversion issues (NAs introduced by coercion)
if (any(is.na(data_matrix))) {
# Handle missing values: replace NAs with row means (or another strategy)
data_matrix[is.na(data_matrix)] <- rowMeans(data_matrix, na.rm = TRUE)
}
rownames(data_matrix) <- significant_data$BIOCHEMICAL
pheatmap(data_matrix,
scale = "row",        # Scale the data by row
clustering_distance_rows = "euclidean",  # Distance measure for clustering rows
clustering_distance_cols = "euclidean",  # Distance measure for clustering columns
clustering_method = "complete",          # Clustering method
show_rownames = TRUE,                    # Show row names (metabolites)
show_colnames = TRUE,                    # Show column names (diet groups)
main = "Significant Metabolite Averages across Diet Groups (P_value < 0.0005)",
width = 8,
height = 20
)
significant_data
data_matrix <- significant_data %>%
select(-BIOCHEMICAL) %>%
mutate(across(everything(), as.numeric))
# Check for any conversion issues (NAs introduced by coercion)
if (any(is.na(data_matrix))) {
# Handle missing values: replace NAs with row means (or another strategy)
data_matrix[is.na(data_matrix)] <- rowMeans(data_matrix, na.rm = TRUE)
}
rownames(data_matrix) <- significant_data$BIOCHEMICAL
rownames(data_matrix) <- significant_data$SUB_PATHWAY
data_matrix <- significant_data %>%
select(-BIOCHEMICAL) %>%
mutate(across(everything(), as.numeric))
rownames(data_matrix) <- significant_data$SUB_PATHWAY
View(data_matrix)
# Check for any conversion issues (NAs introduced by coercion)
if (any(is.na(data_matrix))) {
# Handle missing values: replace NAs with row means (or another strategy)
data_matrix[is.na(data_matrix)] <- rowMeans(data_matrix, na.rm = TRUE)
}
rownames(data_matrix) <- significant_data$BIOCHEMICAL
metabolic_mean <- subset(metabolic_mean, select = -c(SUPER_PATHWAY, SUB_PATHWAY))
significant_data <- metabolic_mean %>% filter(BIOCHEMICAL %in% significant_metabolites)
data_matrix <- significant_data %>%
select(-BIOCHEMICAL) %>%
mutate(across(everything(), as.numeric))
# Check for any conversion issues (NAs introduced by coercion)
if (any(is.na(data_matrix))) {
# Handle missing values: replace NAs with row means (or another strategy)
data_matrix[is.na(data_matrix)] <- rowMeans(data_matrix, na.rm = TRUE)
}
rownames(data_matrix) <- significant_data$BIOCHEMICAL
View(significant_data)
write.csv(significant_data,"Users/caominjie/Desktop/significant_data.csv", row.names = True)
write.csv(significant_data,"Users/caominjie/Desktop/significant_data.csv")
write.csv(significant_data,"/Users/caominjie/Desktop/significant_data.csv")
#extract the SUB_PATHWAY
merged_data <- merge(significant_data, metabolic, by = "BIOCHEMICAL")
significant_pathway <- merged_data %>% select(BIOCHEMICAL, SUB_PATHWAY, everything())
View(significant_pathway )
write.csv(significant_pathway,"Users/caominjie/Desktop/significant_pathway.csv", row.names = True)
write.csv(significant_pathway,"Users/caominjie/Desktop/significant_pathway.csv")
write.csv(significant_pathway,"/Users/caominjie/Desktop/significant_pathway.csv")
#extract the SUB_PATHWAY
merged_data <- merge(significant_data, metabolic_mean, by = "BIOCHEMICAL")
significant_pathway <- merged_data %>% select(BIOCHEMICAL, SUB_PATHWAY, everything())
metabolic_mean <- read_csv(file.choose())
#extract the SUB_PATHWAY
merged_data <- merge(significant_data, metabolic_mean, by = "BIOCHEMICAL")
significant_pathway <- merged_data %>% select(BIOCHEMICAL, SUB_PATHWAY, everything())
View(significant_pathway)
View(data_matrix)
significant_pathways = read.csv(file.choose())
View(significant_pathways)
79.0132333 / 0.6661000
79.0132333 /1.3597833
170 + 102 + 133 + 227 + 152 + 172 + 102 + 155
colnames(metabolic)
##Volcano plot
metabolic <- read_csv(file.choose())
library(tidyverse)
library(readr)
library(reshape2)
library(stats)
library(agricolae)
library(dplyr)
library(ggplot2)
##Volcano plot
metabolic <- read_csv(file.choose())
colnames(metabolic)
dim(metabolic)
# Define NC and HFD columns (adjust the column names as per your dataframe)
nc_columns <- c("NC1", "NC2", "NC3", "NC4", "NC5", "NC5")
hfd_columns <- c("HFD1","HFD2", "HFD3", "HFD4", "HFD5", "HFD6")
# Updated function to perform a t-test and calculate fold change for a single row
perform_t_test_and_fold_change <- function(row) {
nc_values <- as.numeric(row[nc_columns])
hfd_values <- as.numeric(row[hfd_columns])
# Calculate mean values for NC and HFD groups
nc_mean <- mean(nc_values, na.rm = TRUE)
hfd_mean <- mean(hfd_values, na.rm = TRUE)
# Calculate fold change
fold_change <- hfd_mean / nc_mean
# Perform t-test
t_test_result <- t.test(nc_values, hfd_values )
return(c(t_statistic = t_test_result$statistic,
p_value = t_test_result$p.value,
fold_change = fold_change))
}
# Apply the updated function to each row
results <- apply(metabolic, 1, perform_t_test_and_fold_change)
# Convert the results to a dataframe
results_df <- as.data.frame(t(results), stringsAsFactors = FALSE)
colnames(results_df) <- c("T_Statistic", "P_Value", "Fold_Change")
# Convert Fold_Change to numeric, as it may be treated as a character due to combined use in the function
results_df$Fold_Change <- as.numeric(as.character(results_df$Fold_Change))
# Bind the results with the original metabolite names for reference
final_results <- bind_cols(metabolic[1:3], results_df) # Adjust to include relevant identifiers from your dataframe
# View the final results
print(final_results)
# Apply FDR correction to the p-values
final_results$P_Value_Adjusted <- p.adjust(final_results$P_Value, method = "BH")
# Sort the results by adjusted p-value in ascending order
final_results_sorted <- final_results %>%
arrange(P_Value_Adjusted & Fold_Change)
# View the sorted final results
print(final_results_sorted)
dim(final_results_sorted)
dim(metabolic)
sig<-final_results_sorted%>%filter(P_Value_Adjusted <0.05 & Fold_Change > 1 )
dim(sig)
View(metabolic)
hfd_r_columns <- c("HFD_R1","HFD_R2", "HFD_R3", "HFD_R4", "HFD_R5", "HFD_R6")
# Updated function to perform a t-test and calculate fold change for a single row
perform_t_test_and_fold_change <- function(row) {
nc_values <- as.numeric(row[nc_columns])
hfd_values <- as.numeric(row[hfd_r_columns])
# Calculate mean values for NC and HFD groups
nc_mean <- mean(nc_values, na.rm = TRUE)
hfd_mean <- mean(hfd_values, na.rm = TRUE)
# Calculate fold change
fold_change <- hfd_mean / nc_mean
# Perform t-test
t_test_result <- t.test(nc_values, hfd_values )
return(c(t_statistic = t_test_result$statistic,
p_value = t_test_result$p.value,
fold_change = fold_change))
}
# Apply the updated function to each row
results <- apply(metabolic, 1, perform_t_test_and_fold_change)
# Convert the results to a dataframe
results_df <- as.data.frame(t(results), stringsAsFactors = FALSE)
colnames(results_df) <- c("T_Statistic", "P_Value", "Fold_Change")
# Convert Fold_Change to numeric, as it may be treated as a character due to combined use in the function
results_df$Fold_Change <- as.numeric(as.character(results_df$Fold_Change))
# Bind the results with the original metabolite names for reference
final_results <- bind_cols(metabolic[1:3], results_df) # Adjust to include relevant identifiers from your dataframe
# View the final results
print(final_results)
# Apply FDR correction to the p-values
final_results$P_Value_Adjusted <- p.adjust(final_results$P_Value, method = "BH")
# Sort the results by adjusted p-value in ascending order
final_results_sorted <- final_results %>%
arrange(P_Value_Adjusted & Fold_Change)
# View the sorted final results
print(final_results_sorted)
sig
dim(sig)
# Updated function to perform a t-test and calculate fold change for a single row
perform_t_test_and_fold_change <- function(row) {
nc_values <- as.numeric(row[hfd_columns])
hfd_values <- as.numeric(row[hfd_r_columns])
# Calculate mean values for NC and HFD groups
nc_mean <- mean(nc_values, na.rm = TRUE)
hfd_mean <- mean(hfd_values, na.rm = TRUE)
# Calculate fold change
fold_change <- hfd_mean / nc_mean
# Perform t-test
t_test_result <- t.test(nc_values, hfd_values )
return(c(t_statistic = t_test_result$statistic,
p_value = t_test_result$p.value,
fold_change = fold_change))
}
# Apply the updated function to each row
results <- apply(metabolic, 1, perform_t_test_and_fold_change)
# Convert the results to a dataframe
results_df <- as.data.frame(t(results), stringsAsFactors = FALSE)
colnames(results_df) <- c("T_Statistic", "P_Value", "Fold_Change")
# Convert Fold_Change to numeric, as it may be treated as a character due to combined use in the function
results_df$Fold_Change <- as.numeric(as.character(results_df$Fold_Change))
# Bind the results with the original metabolite names for reference
final_results <- bind_cols(metabolic[1:3], results_df) # Adjust to include relevant identifiers from your dataframe
# View the final results
print(final_results)
# Apply FDR correction to the p-values
final_results$P_Value_Adjusted <- p.adjust(final_results$P_Value, method = "BH")
# Sort the results by adjusted p-value in ascending order
final_results_sorted <- final_results %>%
arrange(P_Value_Adjusted & Fold_Change)
# View the sorted final results
print(final_results_sorted)
sig<-final_results_sorted%>%filter(P_Value_Adjusted <0.05 & Fold_Change > 1 )
sig
dim(perform_t_test_and_fold_change)
dim(sig)
label = metabolic["BIOCHEMICAL"]
dim(label)
final_results_sorted <- final_results_sorted %>%
mutate(DE = if_else(P_Value_Adjusted < 0.05, "YES", "NO"))
final_results_sorted%>%
ggplot(aes(Fold_Change, -log10(P_Value)))+
geom_point(aes(color=DE))+
theme_bw()
hfd_m_columns <- c("HFD_M1","HFD_M2", "HFD_M3", "HFD_M4", "HFD_M5", "HFD_M6")
final_results_sorted%>%
ggplot(aes(Fold_Change, -log10(P_Value)))+
geom_point(aes(color=DE))+
theme_bw()+
ggtitle("HFDvsHFD_R Volcano Plot")
# Updated function to perform a t-test and calculate fold change for a single row
perform_t_test_and_fold_change <- function(row) {
nc_values <- as.numeric(row[hfd_columns])
hfd_values <- as.numeric(row[hfd_m_columns])
# Calculate mean values for NC and HFD groups
nc_mean <- mean(nc_values, na.rm = TRUE)
hfd_mean <- mean(hfd_values, na.rm = TRUE)
# Calculate fold change
fold_change <- hfd_mean / nc_mean
# Perform t-test
t_test_result <- t.test(nc_values, hfd_values )
return(c(t_statistic = t_test_result$statistic,
p_value = t_test_result$p.value,
fold_change = fold_change))
}
# Apply the updated function to each row
results <- apply(metabolic, 1, perform_t_test_and_fold_change)
# Convert the results to a dataframe
results_df <- as.data.frame(t(results), stringsAsFactors = FALSE)
colnames(results_df) <- c("T_Statistic", "P_Value", "Fold_Change")
# Convert Fold_Change to numeric, as it may be treated as a character due to combined use in the function
results_df$Fold_Change <- as.numeric(as.character(results_df$Fold_Change))
# Bind the results with the original metabolite names for reference
final_results <- bind_cols(metabolic[1:3], results_df) # Adjust to include relevant identifiers from your dataframe
# View the final results
print(final_results)
# Apply FDR correction to the p-values
final_results$P_Value_Adjusted <- p.adjust(final_results$P_Value, method = "BH")
# Sort the results by adjusted p-value in ascending order
final_results_sorted <- final_results %>%
arrange(P_Value_Adjusted & Fold_Change)
# View the sorted final results
print(final_results_sorted)
sig<-final_results_sorted%>%filter(P_Value_Adjusted <0.05 & Fold_Change > 1 )
sig
label = metabolic["BIOCHEMICAL"]
dim(label)
final_results_sorted <- final_results_sorted %>%
mutate(DE = if_else(P_Value_Adjusted < 0.05, "YES", "NO"))
final_results_sorted%>%
ggplot(aes(Fold_Change, -log10(P_Value)))+
geom_point(aes(color=DE))+
theme_bw()+
ggtitle("HFDvsHFD_R Volcano Plot")
# Updated function to perform a t-test and calculate fold change for a single row
perform_t_test_and_fold_change <- function(row) {
nc_values <- as.numeric(row[hfd_columns])
hfd_values <- as.numeric(row[hfd_m_columns])
# Calculate mean values for NC and HFD groups
nc_mean <- mean(nc_values, na.rm = TRUE)
hfd_mean <- mean(hfd_values, na.rm = TRUE)
# Calculate fold change
fold_change <- hfd_mean / nc_mean
# Perform t-test
t_test_result <- t.test(nc_values, hfd_values )
return(c(t_statistic = t_test_result$statistic,
p_value = t_test_result$p.value,
fold_change = fold_change))
}
# Apply the updated function to each row
results <- apply(metabolic, 1, perform_t_test_and_fold_change)
170 + 102 + 133 + 227 + 152 + 172 + 102 + 154 + 271
192 + 102 + 133 + 227 + 152 + 172 + 102 + 154 + 271
192 + 102 + 133 + 227 + 152 + 194 + 102 + 154 + 271
192 + 102 + 133 + 227 + 152 + 194 + 102 + 154 + 271 + 774
192 + 102 + 133 + 227 + 152 + 194 + 102 + 154 + 271
1530 + 1073
1530 + 1073 +293
1530 + 1073 + 566
192 + 102 + 133 + 227 + 152 + 194 + 102 + 154 + 271
1530 + 1101 + 567
1530 + 1101 + 908
Results:
169 + 100 + 84 + 175 + 142 + 194 + 102 + 154 + 271
Results:
169 + 100 + 84 + 175 + 142 + 194 + 102 + 154 + 271
#Results:
169 + 100 + 84 + 175 + 142 + 194 + 102 + 154 + 271
1391 + 1101 + 904 #methods
#Results:
169 + 100 + 84 + 175 + 142 + 142 + 91 + 125 + 229
1257 + 1101 + 904 #methods
1257 + 998 + 904 #methods
1257 + 998 + 904
1257 + 998 + 904 + 143
1257 + 998 + 904 + 131
1257 + 998 + 904 + 304
1257 + 998 + 904 + 304 + 224
1257 + 998 + 904 + 304 + 222
#Install & Import packages
library(scFlow)
library(qs)
library(Seurat)
library(biomaRt)
library(ggrepel)
library(EnsDb.Hsapiens.v79)
library(Hmisc)
library(cowplot)
library(viridis)
library(gridExtra)
library(foreign)
library(MASS)
library(stringr)
library(plotly)
library(readr)
library(knitr)
library(pacman)
install.packages("pacman")
#Install & Import packages
library(pacman)
library(reshape2)
library(data.table)
library(cowplot)
library(viridis)
library(ggplot2)
library(qs)
library(gridExtra)
library(foreign)
library(MASS)
library(stringr)
library(plotly)
library(readr)
library(knitr)
library(Seurat)
library(qs)
setwd("~/Desktop/PowerAnalysis/Power_Analysis_package")
