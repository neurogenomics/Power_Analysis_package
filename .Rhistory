pval = 0.05,
foldchange = 2)
power_hierarchicell(data_summ,
n_genes = 1000,
n_per_group = 10,
cells_per_case = 2,
cells_per_control = 2,
ncells_variation_type = "Poisson",
pval = 0.05,
foldchange = 2)
error_hierarchicell(data_summ,
method = "Pseudobulk_sum",
n_genes = 1000,
n_per_group = 10,
cells_per_case = 2,
cells_per_control = 2,
ncells_variation_type = "Poisson",
pval = 0.05,
foldchange = 2)
error_hierarchicell(data_summ,
method = "Pseudobulk_mean",
n_genes = 1000,
n_per_group = 10,
cells_per_case = 2,
cells_per_control = 2,
ncells_variation_type = "Poisson",
pval = 0.05,
foldchange = 2)
error_hierarchicell(data_summ,
method = "Pseudobulk_mean",
n_genes = 1000,
n_per_group = 10,
cells_per_case = 20,
cells_per_control = 20,
ncells_variation_type = "Poisson",
pval = 0.05,
foldchange = 2)
error_hierarchicell(data_summ,
method = "Pseudobulk_mean",
n_genes = 1000,
n_per_group = 10,
cells_per_case = 3,
cells_per_control = 3,
ncells_variation_type = "Poisson",
pval = 0.05,
foldchange = 2)
error_hierarchicell(data_summ,
method = "Pseudobulk_mean",
n_genes = 1000,
n_per_group = 10,
cells_per_case = 300,
cells_per_control = 300,
ncells_variation_type = "Poisson",
pval = 0.05,
foldchange = 2)
error_hierarchicell(data_summ,
method = "Pseudobulk_mean",
n_genes = 1000,
n_per_group = 10,
cells_per_case = 300,
cells_per_control = 300,
ncells_variation_type = "Poisson",
pval = 0.05,
foldchange = 3)
error_hierarchicell(data_summ,
method = "Pseudobulk_mean",
n_genes = 1000,
n_per_group = 10,
cells_per_case = 300,
cells_per_control = 300,
ncells_variation_type = "Poisson",
pval = 0.05,
foldchange = 10)
error_hierarchicell(data_summ,
method = "Pseudobulk_mean",
n_genes = 1000,
n_per_group = 10,
cells_per_case = 100,
cells_per_control = 100,
ncells_variation_type = "Poisson",
pval = 0.05,
foldchange = 10)
error_hierarchicell(data_summ,
method = "Pseudobulk_mean",
n_genes = 1000,
n_per_group = 10,
cells_per_case = 100,
cells_per_control = 100,
ncells_variation_type = "Poisson",
pval = 0.05,
foldchange = 2)
error_hierarchicell(data_summ,
method = "Pseudobulk_mean",
n_genes = 1000,
n_per_group = 10,
cells_per_case = 100,
cells_per_control = 100,
ncells_variation_type = "Poisson",
pval = 0.05,
foldchange = 3)
error_hierarchicell(data_summ,
method = "Pseudobulk_sum",
n_genes = 1000,
n_per_group = 10,
cells_per_case = 50,
cells_per_control = 50,
ncells_variation_type = "Poisson",
pval = 0.05,
foldchange = 2)
error_hierarchicell(data_summ,
method = "Pseudobulk_sum",
n_genes = 1000,
n_per_group = 10,
cells_per_case = 50,
cells_per_control = 50,
ncells_variation_type = "NegBin",
pval = 0.05,
foldchange = 2)
?error_hierarchicell
data_summ
error_hierarchicell(data_summ,
method = "Pseudobulk_sum",
n_genes = 1000,
n_per_group = 10,
cells_per_case = 50,
cells_per_control = 50,
ncells_variation_type = "NB",
pval = 0.05,
foldchange = 2)
error_hierarchicell(data_summ,
method = "Pseudobulk_sum",
n_genes = 1000,
n_per_group = 10,
cells_per_case = 500,
cells_per_control = 500,
ncells_variation_type = "NB",
pval = 0.05,
foldchange = 2)
error_hierarchicell(data_summ,
method = "Pseudobulk_sum",
n_genes = 10000,
n_per_group = 10,
cells_per_case = 50,
cells_per_control = 50,
ncells_variation_type = "Poisson",
pval = 0.05,
foldchange = 2)
error_hierarchicell(data_summ,
method = "Pseudobulk_sum",
n_genes = 1000,
n_per_group = 10,
cells_per_case = 50,
cells_per_control = 50,
ncells_variation_type = "Poisson",
pval = 0.05,
foldchange = 2)
devtools::install_github("neurogenomics/hierarchicell")
library(rlang)
devtools::install_github("neurogenomics/hierarchicell")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("neurogenomics/hierarchicell")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(hierarchicell)
gene_counts_filtered <- hierarchicell::filter_counts()
# estimate simulation parameters
data_summ <- hierarchicell::compute_data_summaries(gene_counts_filtered, type = "Norm")
error_hierarchicell(data_summ,
method = "Pseudobulk_sum",
n_genes = 5000,
n_per_group = 30,
cells_per_case = 300,
cells_per_control = 300,
ncells_variation_type = "Poisson",
pval = 0.05,
foldchange = 3)
n_genes <- 5000
fc_range_min <- 1.1#
fc_range_max <- 10
deg_fc_interval <- 0.5
all_fcs <- seq(from=fc_range_min,to=fc_range_max,by=deg_fc_interval)
tbl <- table(sample(all_fcs, size = n_genes, replace = T))
counts <- as.vector(tbl)
names(counts) <- as.numeric(rownames(tbl))
counts
length(counts)
counts
data.table()
library(data.table)
names <- c("Height","Weight","Birthday")
data.table(names)
height <- c("5'1","5'9","6'2")
weight <- c(41,80,91)
birthday <- c("9/10/12","3/1/92","5/7/94")
df1 <- data.table(c(height,weight,birthday))
df1
df1 <- data.table(height)
df1
df1[["weight"]] <- weight
df1[["birthday"]] <- birthday
df1
height <- c("5'4")
weight <- c(66)
birthday <- c("31/10/97")
df2 <- data.table(height)
df2
df2$weight <- weight
df2$birthday <- birthday
df2
df2
df1
data.frame()
rbind(c(df1,df2))
rbindlist(c(df1,df2))
data.frame(df1)
df1 <- data.frame(df1)
df2 <- data.frame(df2)
df1
df2
rbind(c(df1,df2))
rbindlist(c(df1,df2))
rbind(df1,df2)
?data.table
library(data.table)
?data.table
dbinom()
dbinom(5,5,0.55)
for(i=1:9){
print(i)
}
for(i=seq(1,4)){
print(i)
}
for(i in 1:5){
print(i)
}
for(i in 5:9){
print((dbinom(2))^2
}
5^2
for(i in 5:9){
print((dbinom(5,i,0.55)^2)
}
for(i in 5:9){
print(dbinom(5,i,0.55)^2)
}
for(i in 5:9){
print(dbinom(5,i,0.55)^2 + dbinom(5,i,0.55)*dbinom(i-5,i,0.55))
}
prob_Awin <- list()
for(i in 5:9){
prob_Awin[[i-4]] <- dbinom(5,i,0.55)^2 + dbinom(5,i,0.55)*dbinom(i-5,i,0.55)
}
prob_Awin
sum(prob_Awin)
sum(unlist(prob_Awin))
for(i in 5:9){
prob_Awin[[i-4]] <- dbinom(5,i,0.55)^2 + dbinom(5,i,0.55)*dbinom(5,i,0.45)
}
sum(unlist(prob_Awin))
prob_Awin <- list()
for(i in 5:9){
prob_Awin[[i-4]] <- dbinom(5,i,0.55)^2 + dbinom(5,i,0.55)*dbinom(5,i,0.45)
}
sum(unlist(prob_Awin))
dbinom(5,5,0.55)+dbinom(5,6,0.55)+dbinom(5,7,0.55)+dbinom(5,8,0.55)+dbinom(5,9,0.55)
dnbinom(5,9,0.55)
dnbinom(9,5,0.55)
for(i in 5:9){
print((dbinom(5,i,0.55))^2 + (choose(i,5))^2*0.55^i*0.45^i)
}
tot <- list()
for(i in 5:9){
tot[[i-4]] <- (dbinom(5,i,0.55))^2 + (choose(i,5))^2*0.55^i*0.45^i
}
tot
sum(unlist(tot))
library(scflow)
library(scFlow)
range
sampled
c(1,3)
sexID <- "sex"
as.formula(paste0("~",sexID))
testfun <- function(a=2,b=3,c=4){
return(a*b+c)
}
testfun <- function(a,b,c){
print(a*b+c)
}
newfun <- function(a,b,c){
testfun(2,b,4)
}
testfun <- function(a,b=3,c){
print(a*b+c)
}
newfun(1,b=2,3)
newfun(a=1,b=2,3)
newfun(a=1,2,3)
newfun(a=1,2,c=3)
newfun(a,3,c)
class("hi")
class("hi")=="character"
range_downsampled <- c(1,2,3,4)
if(range_downsampled!="placeholder"){
if(!is.list(range_downsampled)&!is.numeric(range_downsampled)){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}
}
class(range_downsampled)
class("hi")
class(list(1,2,4))
range_downsampled!=2
range_downsampled!=c(2)
range_downsampled>0
range_downsampled>0 == TRUE
range_downsampled>0 == "TRUE"
range_downsampled>0
if(range_downsampled>0){
print("ok!")
}
ifelse(range_downsampled>0,print("ok"),range_downsampled)
ifelse(range_downsampled>0,print("ok"))
if(range_downsampled>0 == rep("TRUE",length(range_downsampled))){
print("hi")
}
rep("hi",3)
if((range_downsampled>0) == rep("TRUE",length(range_downsampled))){
print("hi")
}
sapply(range_downsampled,>0)
as.character(range_downsampled)
is.unsorted(range_downsampled)
range_downsampled > 0
1*(range_downsampled > 0)
sum(1*(range_downsampled > 0))
sum(1*(range_downsampled > 0))==length(range_downsampled)
!sum(1*(range_downsampled > 0))==length(range_downsampled)
if(class(range_downsampled)=="character"){
if(range_downsampled!="placeholder"){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}
}else{
if(!is.list(range_downsampled)&!is.numeric(range_downsampled)){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}else if(is.unsorted(range_downsampled)|!sum(1*(range_downsampled > 0))==length(range_downsampled)){
stop("Error: range_downsampled should be an ascending list with all elements bigger than 0.")
}
}
range_downsampled <- c(-3)
if(class(range_downsampled)=="character"){
if(range_downsampled!="placeholder"){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}
}else{
if(!is.list(range_downsampled)&!is.numeric(range_downsampled)){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}else if(is.unsorted(range_downsampled)|!sum(1*(range_downsampled > 0))==length(range_downsampled)){
stop("Error: range_downsampled should be an ascending list with all elements bigger than 0.")
}
}
range_downsampled <- c(4,1,2)
if(class(range_downsampled)=="character"){
if(range_downsampled!="placeholder"){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}
}else{
if(!is.list(range_downsampled)&!is.numeric(range_downsampled)){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}else if(is.unsorted(range_downsampled)|!sum(1*(range_downsampled > 0))==length(range_downsampled)){
stop("Error: range_downsampled should be an ascending list with all elements bigger than 0.")
}
}
range_downsampled <- list(4,1,2)
if(class(range_downsampled)=="character"){
if(range_downsampled!="placeholder"){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}
}else{
if(!is.list(range_downsampled)&!is.numeric(range_downsampled)){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}else if(is.unsorted(range_downsampled)|!sum(1*(range_downsampled > 0))==length(range_downsampled)){
stop("Error: range_downsampled should be an ascending list with all elements bigger than 0.")
}
}
range_downsampled > 0#
1*(range_downsampled > 0)
list(1*(range_downsampled > 0))
sum(1*(range_downsampled > 0))
is.unsorted(range_downsampled)
is.unsorted(c(range_downsampled))
is.unsorted(unlist(range_downsampled))
unlist(c(1,2,3))
range_downsampled <- c(3,1,2)
is.unsorted(unlist(range_downsampled))
range_downsampled <- list(-1,4,2)
if(class(range_downsampled)=="character"){
if(range_downsampled!="placeholder"){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}
}else{
if(!is.list(range_downsampled)&!is.numeric(range_downsampled)){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}else if(is.unsorted(range_downsampled)|!sum(1*(range_downsampled > 0))==length(range_downsampled)){
stop("Error: range_downsampled should be an ascending list with all elements bigger than 0.")
}
}
range_downsampled <- list(4,1,0)
if(class(range_downsampled)=="character"){
if(range_downsampled!="placeholder"){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}
}else{
if(!is.list(range_downsampled)&!is.numeric(range_downsampled)){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}else if(is.unsorted(range_downsampled)|!sum(1*(range_downsampled > 0))==length(range_downsampled)){
stop("Error: range_downsampled should be an ascending list with all elements bigger than 0.")
}
}
range_downsampled <- list(4,1)
if(class(range_downsampled)=="character"){
if(range_downsampled!="placeholder"){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}
}else{
if(!is.list(range_downsampled)&!is.numeric(range_downsampled)){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}else if(is.unsorted(range_downsampled)|!sum(1*(range_downsampled > 0))==length(range_downsampled)){
stop("Error: range_downsampled should be an ascending list with all elements bigger than 0.")
}
}
if(class(range_downsampled)=="character"){
if(range_downsampled!="placeholder"){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}
}else{
if(!is.list(range_downsampled)&!is.numeric(range_downsampled)){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}else if(is.unsorted(unlist(range_downsampled))|!sum(1*(range_downsampled > 0))==length(range_downsampled)){
stop("Error: range_downsampled should be an ascending list with all elements bigger than 0.")
}
}
sin(pi)
sin(90)
for(n in 1:100){}
for(n in 1:100){}
for(n in 1:100){
x=cos(x)
}
x=0
for(n in 1:100){
x=cos(x)
}
x
cod(0.7390851)
cos(0.7390851)
setwd("Z:/")
library(infotheo)
getwd()
devtools::install_github("neurogenomics/Power_Analysis")
install.packages("rworkflows")
library(rworkflows)
?rworkflows::
install.packages(badger)
install.packages("badger")
library(badger)
install.packages("rworkflows")
library(rworkflows)
library(hash)
library(hashmap)
library(dict)
install.packages("dict")
install.packages("hash")
library(hash)
a <- hash()
a[["1"]] <- 10
a
a[["helo"]] <- "why"
a
getwd()
setwd("../Power_Analysis_package/")
library(rworkflows)
?rworkflows::use_workflow()
rworkflows::use_workflow()
getwd()
list.files()
rworkflows::use_workflow()
getwd()
rworkflows::use_workflow()
getwd()
devtools::check()
colData()
?colData()
?as.data.table
?setkeyy
?setkey
?.
?stat_summary
?scale_shape_manual
?labs
?facet_wrap
?theme
?ggsave
?data.table
?geom_bar
?scale_colour_manual
?geom_bar_repel
?setorder
