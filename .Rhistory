cells_per_case = 300,
cells_per_control = 300,
ncells_variation_type = "Poisson",
pval = 0.05,
foldchange = 3)
n_genes <- 5000
fc_range_min <- 1.1#
fc_range_max <- 10
deg_fc_interval <- 0.5
all_fcs <- seq(from=fc_range_min,to=fc_range_max,by=deg_fc_interval)
tbl <- table(sample(all_fcs, size = n_genes, replace = T))
counts <- as.vector(tbl)
names(counts) <- as.numeric(rownames(tbl))
counts
length(counts)
counts
data.table()
library(data.table)
names <- c("Height","Weight","Birthday")
data.table(names)
height <- c("5'1","5'9","6'2")
weight <- c(41,80,91)
birthday <- c("9/10/12","3/1/92","5/7/94")
df1 <- data.table(c(height,weight,birthday))
df1
df1 <- data.table(height)
df1
df1[["weight"]] <- weight
df1[["birthday"]] <- birthday
df1
height <- c("5'4")
weight <- c(66)
birthday <- c("31/10/97")
df2 <- data.table(height)
df2
df2$weight <- weight
df2$birthday <- birthday
df2
df2
df1
data.frame()
rbind(c(df1,df2))
rbindlist(c(df1,df2))
data.frame(df1)
df1 <- data.frame(df1)
df2 <- data.frame(df2)
df1
df2
rbind(c(df1,df2))
rbindlist(c(df1,df2))
rbind(df1,df2)
?data.table
library(data.table)
?data.table
dbinom()
dbinom(5,5,0.55)
for(i=1:9){
print(i)
}
for(i=seq(1,4)){
print(i)
}
for(i in 1:5){
print(i)
}
for(i in 5:9){
print((dbinom(2))^2
}
5^2
for(i in 5:9){
print((dbinom(5,i,0.55)^2)
}
for(i in 5:9){
print(dbinom(5,i,0.55)^2)
}
for(i in 5:9){
print(dbinom(5,i,0.55)^2 + dbinom(5,i,0.55)*dbinom(i-5,i,0.55))
}
prob_Awin <- list()
for(i in 5:9){
prob_Awin[[i-4]] <- dbinom(5,i,0.55)^2 + dbinom(5,i,0.55)*dbinom(i-5,i,0.55)
}
prob_Awin
sum(prob_Awin)
sum(unlist(prob_Awin))
for(i in 5:9){
prob_Awin[[i-4]] <- dbinom(5,i,0.55)^2 + dbinom(5,i,0.55)*dbinom(5,i,0.45)
}
sum(unlist(prob_Awin))
prob_Awin <- list()
for(i in 5:9){
prob_Awin[[i-4]] <- dbinom(5,i,0.55)^2 + dbinom(5,i,0.55)*dbinom(5,i,0.45)
}
sum(unlist(prob_Awin))
dbinom(5,5,0.55)+dbinom(5,6,0.55)+dbinom(5,7,0.55)+dbinom(5,8,0.55)+dbinom(5,9,0.55)
dnbinom(5,9,0.55)
dnbinom(9,5,0.55)
for(i in 5:9){
print((dbinom(5,i,0.55))^2 + (choose(i,5))^2*0.55^i*0.45^i)
}
tot <- list()
for(i in 5:9){
tot[[i-4]] <- (dbinom(5,i,0.55))^2 + (choose(i,5))^2*0.55^i*0.45^i
}
tot
sum(unlist(tot))
library(scflow)
library(scFlow)
range
sampled
c(1,3)
sexID <- "sex"
as.formula(paste0("~",sexID))
testfun <- function(a=2,b=3,c=4){
return(a*b+c)
}
testfun <- function(a,b,c){
print(a*b+c)
}
newfun <- function(a,b,c){
testfun(2,b,4)
}
testfun <- function(a,b=3,c){
print(a*b+c)
}
newfun(1,b=2,3)
newfun(a=1,b=2,3)
newfun(a=1,2,3)
newfun(a=1,2,c=3)
newfun(a,3,c)
class("hi")
class("hi")=="character"
range_downsampled <- c(1,2,3,4)
if(range_downsampled!="placeholder"){
if(!is.list(range_downsampled)&!is.numeric(range_downsampled)){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}
}
class(range_downsampled)
class("hi")
class(list(1,2,4))
range_downsampled!=2
range_downsampled!=c(2)
range_downsampled>0
range_downsampled>0 == TRUE
range_downsampled>0 == "TRUE"
range_downsampled>0
if(range_downsampled>0){
print("ok!")
}
ifelse(range_downsampled>0,print("ok"),range_downsampled)
ifelse(range_downsampled>0,print("ok"))
if(range_downsampled>0 == rep("TRUE",length(range_downsampled))){
print("hi")
}
rep("hi",3)
if((range_downsampled>0) == rep("TRUE",length(range_downsampled))){
print("hi")
}
sapply(range_downsampled,>0)
as.character(range_downsampled)
is.unsorted(range_downsampled)
range_downsampled > 0
1*(range_downsampled > 0)
sum(1*(range_downsampled > 0))
sum(1*(range_downsampled > 0))==length(range_downsampled)
!sum(1*(range_downsampled > 0))==length(range_downsampled)
if(class(range_downsampled)=="character"){
if(range_downsampled!="placeholder"){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}
}else{
if(!is.list(range_downsampled)&!is.numeric(range_downsampled)){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}else if(is.unsorted(range_downsampled)|!sum(1*(range_downsampled > 0))==length(range_downsampled)){
stop("Error: range_downsampled should be an ascending list with all elements bigger than 0.")
}
}
range_downsampled <- c(-3)
if(class(range_downsampled)=="character"){
if(range_downsampled!="placeholder"){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}
}else{
if(!is.list(range_downsampled)&!is.numeric(range_downsampled)){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}else if(is.unsorted(range_downsampled)|!sum(1*(range_downsampled > 0))==length(range_downsampled)){
stop("Error: range_downsampled should be an ascending list with all elements bigger than 0.")
}
}
range_downsampled <- c(4,1,2)
if(class(range_downsampled)=="character"){
if(range_downsampled!="placeholder"){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}
}else{
if(!is.list(range_downsampled)&!is.numeric(range_downsampled)){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}else if(is.unsorted(range_downsampled)|!sum(1*(range_downsampled > 0))==length(range_downsampled)){
stop("Error: range_downsampled should be an ascending list with all elements bigger than 0.")
}
}
range_downsampled <- list(4,1,2)
if(class(range_downsampled)=="character"){
if(range_downsampled!="placeholder"){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}
}else{
if(!is.list(range_downsampled)&!is.numeric(range_downsampled)){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}else if(is.unsorted(range_downsampled)|!sum(1*(range_downsampled > 0))==length(range_downsampled)){
stop("Error: range_downsampled should be an ascending list with all elements bigger than 0.")
}
}
range_downsampled > 0#
1*(range_downsampled > 0)
list(1*(range_downsampled > 0))
sum(1*(range_downsampled > 0))
is.unsorted(range_downsampled)
is.unsorted(c(range_downsampled))
is.unsorted(unlist(range_downsampled))
unlist(c(1,2,3))
range_downsampled <- c(3,1,2)
is.unsorted(unlist(range_downsampled))
range_downsampled <- list(-1,4,2)
if(class(range_downsampled)=="character"){
if(range_downsampled!="placeholder"){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}
}else{
if(!is.list(range_downsampled)&!is.numeric(range_downsampled)){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}else if(is.unsorted(range_downsampled)|!sum(1*(range_downsampled > 0))==length(range_downsampled)){
stop("Error: range_downsampled should be an ascending list with all elements bigger than 0.")
}
}
range_downsampled <- list(4,1,0)
if(class(range_downsampled)=="character"){
if(range_downsampled!="placeholder"){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}
}else{
if(!is.list(range_downsampled)&!is.numeric(range_downsampled)){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}else if(is.unsorted(range_downsampled)|!sum(1*(range_downsampled > 0))==length(range_downsampled)){
stop("Error: range_downsampled should be an ascending list with all elements bigger than 0.")
}
}
range_downsampled <- list(4,1)
if(class(range_downsampled)=="character"){
if(range_downsampled!="placeholder"){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}
}else{
if(!is.list(range_downsampled)&!is.numeric(range_downsampled)){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}else if(is.unsorted(range_downsampled)|!sum(1*(range_downsampled > 0))==length(range_downsampled)){
stop("Error: range_downsampled should be an ascending list with all elements bigger than 0.")
}
}
if(class(range_downsampled)=="character"){
if(range_downsampled!="placeholder"){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}
}else{
if(!is.list(range_downsampled)&!is.numeric(range_downsampled)){
stop("Error: range_downsampled should be a list or numeric vector containing the values to be downsampled at.")
}else if(is.unsorted(unlist(range_downsampled))|!sum(1*(range_downsampled > 0))==length(range_downsampled)){
stop("Error: range_downsampled should be an ascending list with all elements bigger than 0.")
}
}
sin(pi)
sin(90)
for(n in 1:100){}
for(n in 1:100){}
for(n in 1:100){
x=cos(x)
}
x=0
for(n in 1:100){
x=cos(x)
}
x
cod(0.7390851)
cos(0.7390851)
setwd("Z:/")
library(infotheo)
getwd()
devtools::install_github("neurogenomics/Power_Analysis")
install.packages("rworkflows")
library(rworkflows)
?rworkflows::
install.packages(badger)
install.packages("badger")
library(badger)
install.packages("rworkflows")
library(rworkflows)
library(hash)
library(hashmap)
library(dict)
install.packages("dict")
install.packages("hash")
library(hash)
a <- hash()
a[["1"]] <- 10
a
a[["helo"]] <- "why"
a
?colData()
library(SingleCellExperiment)
?colData()
?colData
?rowSums
?counts
?counts()
?counts
?colData
library(SingleCellExperiment)
?counts
?counts
?rbind
?names
?melt
?setnames
library(data.table)
?setnames
?select
library(Hmisc)
?select
?select
?setnames
?rowSums
Matrix::rowSums
?Matrix::rowSums
?select
library(Hmisc)
?select
?get
?names
?aes
?factor
?unique
library(ensembldb)
browseVignettes("ensembldb")
?lapply
?element_text
?duplicted
?duplicated
?length
?sapply
?as.character
?matrix
?unique
conflicts()
conflicts()
library(BiocGenerics)
conflicts()
?geom_bar_repel
library(ggrepel)
?geom_bar_repel
library(ggplot2)
geom_bar_repel
?geom_bar_repel
?get
?select
?scales
?percent
?unit
library(ggplot2)
?unit
class("hello")
test <- list(1,2,3)
test
for(j in list){
for(j in list){
print(j)
}
for(j in test){
print(j)
}
test <- c(1,2,3)
for(j in test){
print(j)
}
test <- c(4,5,2)
for(a in test){}
for(a in test){
print(a)
}
for(a in seq_along(test)){}
for(a in seq_along(test)){
print(a,names(test)[a])
}
for(a in seq_along(test)){
print(a)
}
for(a in seq_along(test)){
print(paste(a,names(test)[a]))
}
for(a in seq_along(test)){
print(paste(a,names(test)[[a]))
for(a in seq_along(test)){
print(paste(a,names(test)[[a]]))
}
for(a in seq_along(test)){
print(paste0(a,names(test)[[a]]))
}
for(a in seq_along(test)){
print(paste0(a,test[[a]]))
}
?seq_along
for(a in seq_along(test)){
print(paste0(a,test[a]))
}
test[2]
c(10,15,20,30)
a <- c(10,15,20,30)
a[a<4]
a[a<30]
library(glue)
test<-"hi"
paste("hello",test)
paste0("hello",test)
paste0("hello",test,"/")
getwd()
library(qs)
data<-qs::qread("../Desktop/allen_Endo.qs")
data
data
colData(data)
colnames(colData(data))
colData(data)["cell_type"]
a <- list()
a[[0.1]] = 1
a
a[[0.1]]
a[[0.2]]
a[[4]]
a[[1]]
a[[1.1]]
a[[1.9]]
a[[2]]
test <- c("Tsai","Zhou","Smith")
main <- "Zhou"
match(test,main)
which(test==main)
seq_len(5)
test
c(test, paste0(main, "_randperm_", seq_len(4)))
celltype_corr <- list(L4IT=c("L2/3-6 intratelencephalic projecting glutamatergic cortical neuron",NA,NA,NA),
L5IT=c(NA,"L2/3-6 intratelencephalic projecting glutamatergic cortical neuron",NA,NA),
Oligo=c(NA,NA,"oligodendrocyte",NA),
Vip=c(NA,NA,NA,"vip GABAergic cortical interneuron"))
celltype_names <- celltype_corr[["L4It"]]
celltype_names <- celltype_corr[["L4IT"]]
celltype_names
rep(1,5)
c(test,rep(1,))
c(test,rep(1,5))
c(test, paste0(main,"_Test",seq_len(0)))
c(test, paste0(main,"_Test",seq_len(1)))
c(test, paste0(main,"_Test",seq_len(2)))
c(test, paste0(main,"_Test",seq_len(4)))
names(celltype_corr)
pval=1
sex_DEGs<-TRUE
title <- ifelse(pval==1 && sex_DEGs==FALSE, "Using all DEGs (from all chromosomes)",
ifelse(pval==1 && sex_DEGs==TRUE, "Using all DEGs (from sex chromosomes)",
ifelse(pval==0 && sex_DEGs==FALSE, paste0("DEGs selected at a ", pval*100, "% cut-off (from all chromosomes)"),
ifelse(pval==0 && sex_DEGs==TRUE, paste0("DEGs selected at a ", pval*100, "% cut-off (from sex chromosomes)")))))
title
pval<-0.03
title <- ifelse(pval==1 && sex_DEGs==FALSE, "Using all DEGs (from all chromosomes)",
ifelse(pval==1 && sex_DEGs==TRUE, "Using all DEGs (from sex chromosomes)",
ifelse(pval==0 && sex_DEGs==FALSE, paste0("DEGs selected at a ", pval*100, "% cut-off (from all chromosomes)"),
ifelse(pval==0 && sex_DEGs==TRUE, paste0("DEGs selected at a ", pval*100, "% cut-off (from sex chromosomes)")))))
ifelse(pval==1 && sex_DEGs==FALSE, "Using all DEGs (from all chromosomes)",
ifelse(pval==1 && sex_DEGs==TRUE, "Using all DEGs (from sex chromosomes)",
ifelse(pval==0 && sex_DEGs==FALSE, paste0("DEGs selected at a ", pval*100, "% cut-off (from all chromosomes)"),
ifelse(pval==0 && sex_DEGs==TRUE, paste0("DEGs selected at a ", pval*100, "% cut-off (from sex chromosomes)")))))
ifelse(pval==1 && sex_DEGs==FALSE, "Using all DEGs (from all chromosomes)",
ifelse(pval==1 && sex_DEGs==TRUE, "Using all DEGs (from sex chromosomes)",
ifelse(pval!=1 && sex_DEGs==FALSE, paste0("DEGs selected at a ", pval*100, "% cut-off (from all chromosomes)"),
ifelse(pval!=1 && sex_DEGs==TRUE, paste0("DEGs selected at a ", pval*100, "% cut-off (from sex chromosomes)")))))
sex_DEGs
pval
sex_DEGs<-FALSE
pval<-0.04
ifelse(pval==1 && sex_DEGs==FALSE, "Using all DEGs (from all chromosomes)",
ifelse(pval==1 && sex_DEGs==TRUE, "Using all DEGs (from sex chromosomes)",
ifelse(pval!=1 && sex_DEGs==FALSE, paste0("DEGs selected at a ", pval*100, "% cut-off (from all chromosomes)"),
ifelse(pval!=1 && sex_DEGs==TRUE, paste0("DEGs selected at a ", pval*100, "% cut-off (from sex chromosomes)")))))
getwd()
### TESTING PACKAGE
## TESTING ACTUAL PACKAGE
setwd("C:/Users/salma/Power_Analysis_package")
devtools::document()
#usethis::use_vignette("poweranalysis")
devtools::load_all()
devtools::install()
devtools::check()
devtools::build()
### TESTING PACKAGE
## TESTING ACTUAL PACKAGE
setwd("C:/Users/salma/Power_Analysis_package")
devtools::document()
#usethis::use_vignette("poweranalysis")
devtools::load_all()
devtools::install()
devtools::check()
devtools::build()
View(celltype_corr)
