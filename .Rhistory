<<<<<<< HEAD
resSig.selected <- resSig.selected[order(resSig.selected$log2FoldChange),]
annoCol<-list(Day=c(d2="#E7D2E1", d3="#7E668C", d4="#8A0089", d5="#330055"),
Condition=c(Control="#C5C5C8",Infected="#6A004A"))
pheatmap(mat, cluster_rows = FALSE,
annotation_col = anno,
annotation_colors = annoCol,
color = colorRampPalette(c("#17255A","white","#BD1E1E"))(100))
# define the colours
annoCol<-list(Day=c(d2="#E7D2E1", d3="#7E668C", d4="#8A0089", d5="#330055"),
Condition=c(Control="#C5C5C8",Infected="#6A004A"))
pheatmap(mat, cluster_rows = FALSE,
annotation_col = anno,
annotation_colors = annoCol,
color = colorRampPalette(c("#17255A","white","#BD1E1E"))(100))
#Variance stabilizing transformation
vsd <- vst(dds, blind = FALSE)
topVarGeneNumbers <- head(order(rowVars(assay(vsd)), decreasing = TRUE), 50)
topVarGenes <-rowVars(assay(vsd))[topVarGeneNumbers]
#Normalise with respect to mean:
mat  <- assay(vsd)[ topVarGeneNumbers, ]
mat  <- mat - rowMeans(mat)
anno <- as.data.frame(colData(vsd)[, c("sample_type","gender")])
#Sort genes by expression fold change:
resSig.selected <- resSig[topVarGenes,]
resSig.selected <- resSig.selected[order(resSig.selected$log2FoldChange),]
# define the colours
annoCol<-list(Day=c(d2="#E7D2E1", d3="#7E668C", d4="#8A0089", d5="#330055"),
Condition=c(Control="#C5C5C8",Infected="#6A004A"))
pheatmap(mat, cluster_rows = FALSE,
annotation_col = anno,
annotation_colors = annoCol,
color = colorRampPalette(c("#17255A","white","#BD1E1E"))(100))
pheatmap(mat, cluster_rows = FALSE,
annotation_col = anno,
annotation_colors = annoCol,
color = colorRampPalette(c("#17255A","white","#BD1E1E"))(100))
# Convert significant DEGs to box plot format
res_df <- as.data.table(res05[res05$padj < 0.05 & !is.na(res05$padj), ])
# Add a new column for direction
res_df[, deg_direction := ifelse(log2FoldChange > 0, "Up", "Down")]
# Create box plot of effect sizes
ggplot(res_df, aes(x = deg_direction, y = log2FoldChange, fill = deg_direction)) +
geom_boxplot(width = 0.5, outlier.shape = NA) +  # Hide outliers
geom_jitter(width = 0.15, alpha = 0.1, size = 1.5, color = "orange") +  # Add individual points
geom_hline(yintercept = 0, linetype = "dashed", color = "grey40") +
stat_summary(
fun = median,
geom = "point",
shape = 18,
size = 4,
color = "red"
) +  # Highlight medians
labs(
x = "DEG Direction",
y = "Log2 Fold Change",
title = "Distribution of DEG Effect Sizes",
fill = "Direction"
) +
scale_fill_viridis(discrete = TRUE, begin = 0.3, end = 0.7) +
theme_cowplot() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text = element_text(size = 12)
)
# Generate volcano plot
volcano_plot <- ggplot(res_df, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(aes(color = sig), alpha = 0.7, size = 2) +
scale_color_manual(values = color_values) +
geom_vline(xintercept = c(-1, 1), linetype = "dashed", color = "grey40") +
labs(
x = "Log2 Fold Change",
y = "-log10(Adjusted p-value)",
color = "Significance",
title = "Volcano Plot of Significant DEGs (FDR < 0.05)"  # Add title here
) +
theme_cowplot() +
ggrepel::geom_text_repel(
data = top_genes,
aes(label = gene),
size = 3,
max.overlaps = 20,
box.padding = 0.5
) +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)  # Center and style title
)
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df <- res05[res05$padj < 0.05 & !is.na(res05$padj), ]
res_df[, sig := "FDR<0.05 & |logFC| ≤ 1"]  # Default for significant but small effect
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df[, sig := "FDR<0.05 & |logFC| ≤ 1"]  # Default for significant but small effect
# Convert significant DEGs to box plot format
res_df <- as.data.table(res05[res05$padj < 0.05 & !is.na(res05$padj), ])
# Add a new column for direction
res_df[, deg_direction := ifelse(log2FoldChange > 0, "Up", "Down")]
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df[, sig := "FDR<0.05 & |logFC| ≤ 1"]  # Default for significant but small effect
res_df[log2FoldChange > 1, sig := "FDR<0.05 & logFC>1"]
res_df[log2FoldChange < -1, sig := "FDR<0.05 & logFC<-1"]
# Define colors for the categories
color_values <- c(
"FDR<0.05 & logFC>1" = "#BC2C1A",  # Red for high upregulated
"FDR<0.05 & logFC<-1" = "#7FB7BE", # Blue for high downregulated
"FDR<0.05 & |logFC| ≤ 1" = "grey50"  # Grey for significant but small effect
)
# Identify top 10 genes (lowest padj) to label
top_genes <- res_df[order(padj)][1:10]
# Generate volcano plot
volcano_plot <- ggplot(res_df, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(aes(color = sig), alpha = 0.7, size = 2) +
scale_color_manual(values = color_values) +
geom_vline(xintercept = c(-1, 1), linetype = "dashed", color = "grey40") +
labs(
x = "Log2 Fold Change",
y = "-log10(Adjusted p-value)",
color = "Significance",
title = "Volcano Plot of Significant DEGs (FDR < 0.05)"  # Add title here
) +
theme_cowplot() +
ggrepel::geom_text_repel(
data = top_genes,
aes(label = gene),
size = 3,
max.overlaps = 20,
box.padding = 0.5
) +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)  # Center and style title
)
print(volcano_plot)
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df <- res05[res05$padj < 0.05 & !is.na(res05$padj), ]
res_df$gene <- rownames(res_df)
res_df[, sig := "FDR<0.05 & |logFC| ≤ 1"]  # Default for significant but small effect
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df <- res05[padj < 0.05 & !is.na(padj)]
sum(res05$padj < 0.05, na.rm=TRUE)
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df <- res05[res05$padj < 0.05 & !is.na(res05$padj), ]
res_df[, sig := "FDR<0.05 & |logFC| ≤ 1"]  # Default for significant but small effect
# Convert significant DEGs to box plot format
res_df <- as.data.table(res05[res05$padj < 0.05 & !is.na(res05$padj), ])
# Add a new column for direction
res_df[, deg_direction := ifelse(log2FoldChange > 0, "Up", "Down")]
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df[, sig := "FDR<0.05 & |logFC| ≤ 1"]  # Default for significant but small effect
res_df[log2FoldChange > 1, sig := "FDR<0.05 & logFC>1"]
res_df[log2FoldChange < -1, sig := "FDR<0.05 & logFC<-1"]
# Define colors for the categories
color_values <- c(
"FDR<0.05 & logFC>1" = "#BC2C1A",  # Red for high upregulated
"FDR<0.05 & logFC<-1" = "#7FB7BE", # Blue for high downregulated
"FDR<0.05 & |logFC| ≤ 1" = "grey50"  # Grey for significant but small effect
)
# Identify top 10 genes (lowest padj) to label
top_genes <- res_df[order(padj)][1:10]
# Generate volcano plot
volcano_plot <- ggplot(res_df, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(aes(color = sig), alpha = 0.7, size = 2) +
scale_color_manual(values = color_values) +
geom_vline(xintercept = c(-1, 1), linetype = "dashed", color = "grey40") +
labs(
x = "Log2 Fold Change",
y = "-log10(Adjusted p-value)",
color = "Significance",
title = "Volcano Plot of Significant DEGs (FDR < 0.05)"  # Add title here
) +
theme_cowplot() +
ggrepel::geom_text_repel(
data = top_genes,
aes(label = gene),
size = 3,
max.overlaps = 20,
box.padding = 0.5
) +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)  # Center and style title
)
print(volcano_plot)
# Create a data.frame from the results
res_df <- res05[res05$padj < 0.05 & !is.na(res05$padj), ]
# Add a new column for direction
res_df$sig <- "FDR<0.05 & |logFC| ≤ 1"  # Default for significant but small effect
res_df$sig[res_df$log2FoldChange > 1] <- "FDR<0.05 & logFC>1"
res_df$sig[res_df$log2FoldChange < -1] <- "FDR<0.05 & logFC<-1"
# Define colors for the categories
color_values <- c(
"FDR<0.05 & logFC>1" = "#BC2C1A",  # Red for high upregulated
"FDR<0.05 & logFC<-1" = "#7FB7BE", # Blue for high downregulated
"FDR<0.05 & |logFC| ≤ 1" = "grey50"  # Grey for significant but small effect
)
# Identify top 10 genes (lowest padj) to label
top_genes <- res_df[order(padj)][1:10]
# Subset to create res_df with significant DEGs
res_df <- res05[res05$padj < 0.05 & !is.na(res05$padj), ]
# Add a new column for direction
res_df$sig <- "FDR<0.05 & |logFC| ≤ 1"  # Default for significant but small effect
res_df$sig[res_df$log2FoldChange > 1] <- "FDR<0.05 & logFC>1"
res_df$sig[res_df$log2FoldChange < -1] <- "FDR<0.05 & logFC<-1"
# Define colors for the categories
color_values <- c(
"FDR<0.05 & logFC>1" = "#BC2C1A",  # Red for high upregulated
"FDR<0.05 & logFC<-1" = "#7FB7BE",  # Blue for high downregulated
"FDR<0.05 & |logFC| ≤ 1" = "grey50"  # Grey for significant but small effect
)
# Identify top 10 genes (lowest padj) to label
top_genes <- res_df[order(res_df$padj)][1:10]
# Subset to create res_df with significant DEGs
res_df <- res05[res05$padj < 0.05 & !is.na(res05$padj), ]
# Remove NA values from padj before ordering
res_df <- res_df[!is.na(res_df$padj), ]
# Add a new column for direction
res_df$sig <- "FDR<0.05 & |logFC| ≤ 1"  # Default for significant but small effect
res_df$sig[res_df$log2FoldChange > 1] <- "FDR<0.05 & logFC>1"
res_df$sig[res_df$log2FoldChange < -1] <- "FDR<0.05 & logFC<-1"
# Define colors for the categories
color_values <- c(
"FDR<0.05 & logFC>1" = "#BC2C1A",  # Red for high upregulated
"FDR<0.05 & logFC<-1" = "#7FB7BE",  # Blue for high downregulated
"FDR<0.05 & |logFC| ≤ 1" = "grey50"  # Grey for significant but small effect
)
# Identify top 10 genes (lowest padj) to label, ensuring we don't go out of bounds
top_genes <- res_df[order(res_df$padj)][1:min(10, nrow(res_df))]
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df[, sig := "FDR<0.05 & |logFC| ≤ 1"]  # Default for significant but small effect
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df <- res05[res05$padj < 0.05 & !is.na(res05$padj), ]
res_df[, sig := "FDR<0.05 & |logFC| ≤ 1"]  # Default for significant but small effect
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df[, sig := "FDR<0.05 & |logFC| ≤ 1"]  # Default for significant but small effect
# Convert significant DEGs to box plot format
res_df <- as.data.table(res05[res05$padj < 0.05 & !is.na(res05$padj), ])
# Add a new column for direction
res_df[, deg_direction := ifelse(log2FoldChange > 0, "Up", "Down")]
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df[, sig := "FDR<0.05 & |logFC| ≤ 1"]  # Default for significant but small effect
res_df[log2FoldChange > 1, sig := "FDR<0.05 & logFC>1"]
res_df[log2FoldChange < -1, sig := "FDR<0.05 & logFC<-1"]
# Define colors for the categories
color_values <- c(
"FDR<0.05 & logFC>1" = "#BC2C1A",  # Red for high upregulated
"FDR<0.05 & logFC<-1" = "#7FB7BE", # Blue for high downregulated
"FDR<0.05 & |logFC| ≤ 1" = "grey50"  # Grey for significant but small effect
)
# Identify top 10 genes (lowest padj) to label
top_genes <- res_df[order(padj)][1:10]
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df <- as.data.table(res05[res05$padj < 0.05 & !is.na(res05$padj), ])
res_df[, sig := "FDR<0.05 & |logFC| ≤ 1"]  # Default for significant but small effect
res_df[log2FoldChange > 1, sig := "FDR<0.05 & logFC>1"]
res_df[log2FoldChange < -1, sig := "FDR<0.05 & logFC<-1"]
# Define colors for the categories
color_values <- c(
"FDR<0.05 & logFC>1" = "#BC2C1A",  # Red for high upregulated
"FDR<0.05 & logFC<-1" = "#7FB7BE", # Blue for high downregulated
"FDR<0.05 & |logFC| ≤ 1" = "grey50"  # Grey for significant but small effect
)
# Identify top 10 genes (lowest padj) to label
top_genes <- res_df[order(padj)][1:10]
# Generate volcano plot
volcano_plot <- ggplot(res_df, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(aes(color = sig), alpha = 0.7, size = 2) +
scale_color_manual(values = color_values) +
geom_vline(xintercept = c(-1, 1), linetype = "dashed", color = "grey40") +
labs(
x = "Log2 Fold Change",
y = "-log10(Adjusted p-value)",
color = "Significance",
title = "Volcano Plot of Significant DEGs (FDR < 0.05)"  # Add title here
) +
theme_cowplot() +
ggrepel::geom_text_repel(
data = top_genes,
aes(label = gene),
size = 3,
max.overlaps = 20,
box.padding = 0.5
) +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)  # Center and style title
)
print(volcano_plot)
# Generate volcano plot
volcano_plot <- ggplot(res_df, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(aes(color = sig), alpha = 0.7, size = 2) +
scale_color_manual(values = color_values) +
geom_vline(xintercept = c(-1, 1), linetype = "dashed", color = "grey40") +
labs(
x = "Log2 Fold Change",
y = "-log10(Adjusted p-value)",
color = "Significance",
title = "Volcano Plot of Significant DEGs (FDR < 0.05)"  # Add title here
) +
theme_cowplot() +
ggrepel::geom_text_repel(
data = top_genes,
size = 3,
max.overlaps = 20,
box.padding = 0.5
) +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)  # Center and style title
)
print(volcano_plot)
# Generate volcano plot
volcano_plot <- ggplot(res_df, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(aes(color = sig), alpha = 0.7, size = 2) +
scale_color_manual(values = color_values) +
geom_vline(xintercept = c(-1, 1), linetype = "dashed", color = "grey40") +
labs(
x = "Log2 Fold Change",
y = "-log10(Adjusted p-value)",
color = "Significance",
title = "Volcano Plot of Significant DEGs (FDR < 0.05)"  # Add title here
) +
theme_cowplot() +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)  # Center and style title
)
print(volcano_plot)
res_df
res_df <- res05[res05$padj < 0.05 & !is.na(res05$padj), ]
res_df
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df <- res05[res05$padj < 0.05 & !is.na(res05$padj), ]
res_df[, sig := "FDR<0.05 & |logFC| ≤ 1"]  # Default for significant but small effect
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df <- res05[res05$padj < 0.05 & !is.na(res05$padj), ]
res_df <- res_df[!is.na(res_df$padj), ]
res_df[, sig := "FDR<0.05 & |logFC| ≤ 1"]  # Default for significant but small effect
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df <- res05$padj < 0.05 & !is.na(res05$padj)
res_df[, sig := "FDR<0.05 & |logFC| ≤ 1"]  # Default for significant but small effect
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df <- res05[res05$padj < 0.05 & !is.na(res05$padj), ]
res_df[, sig := "FDR<0.05 & |logFC| ≤ 1"]  # Default for significant but small effect
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df <- res05[res05$padj < 0.05 & !is.na(res05$padj), ]
res_df[log2FoldChange > 1, sig := "FDR<0.05 & |logFC| ≤ 1"]  # Default for significant but small effect
res_df <- res05[res05$padj < 0.05 & !is.na(res05$padj), ]
res_df
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df <- res05[res05$padj < 0.05 & !is.na(res05$padj), ]
res_df[log2FoldChange > 1, sig := "FDR<0.05 & logFC>1"]
res_df
str(res_df)
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df <- res05[res05$padj < 0.05 & !is.na(res05$padj), ]
res_df$sig <- "FDR<0.05 & |logFC| ≤ 1"   # Default for significant but small effect
res_df[log2FoldChange > 1, sig := "FDR<0.05 & logFC>1"]
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df <- res05[res05$padj < 0.05 & !is.na(res05$padj), ]
res_df$sig <- "FDR<0.05 & |logFC| ≤ 1"   # Default for significant but small effect
res_df$sig[res_df$log2FoldChange > 1] <- "FDR<0.05 & logFC>1"
res_df$sig[res_df$log2FoldChange < -1] <- "FDR<0.05 & logFC<-1"
# Define colors for the categories
color_values <- c(
"FDR<0.05 & logFC>1" = "#BC2C1A",  # Red for high upregulated
"FDR<0.05 & logFC<-1" = "#7FB7BE", # Blue for high downregulated
"FDR<0.05 & |logFC| ≤ 1" = "grey50"  # Grey for significant but small effect
)
# Identify top 10 genes (lowest padj) to label
top_genes <- res_df[order(padj)][1:10]
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df <- res05[res05$padj < 0.05 & !is.na(res05$padj), ]
res_df$sig <- "FDR<0.05 & |logFC| ≤ 1"   # Default for significant but small effect
res_df$sig[res_df$log2FoldChange > 1] <- "FDR<0.05 & logFC>1"
res_df$sig[res_df$log2FoldChange < -1] <- "FDR<0.05 & logFC<-1"
# Define colors for the categories
color_values <- c(
"FDR<0.05 & logFC>1" = "#BC2C1A",  # Red for high upregulated
"FDR<0.05 & logFC<-1" = "#7FB7BE", # Blue for high downregulated
"FDR<0.05 & |logFC| ≤ 1" = "grey50"  # Grey for significant but small effect
)
# Identify top 10 genes (lowest padj) to label
top_genes <- res_df[order(res_df$padj)][1:min(10, nrow(res_df))]
res_df
colnames(res_df)
print(res_df)
top_genes <- res_df[order(res_df$padj), ][1:10, ]
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df <- res05[res05$padj < 0.05 & !is.na(res05$padj), ]
res_df$sig <- "FDR<0.05 & |logFC| ≤ 1"   # Default for significant but small effect
res_df$sig[res_df$log2FoldChange > 1] <- "FDR<0.05 & logFC>1"
res_df$sig[res_df$log2FoldChange < -1] <- "FDR<0.05 & logFC<-1"
# Define colors for the categories
color_values <- c(
"FDR<0.05 & logFC>1" = "#BC2C1A",  # Red for high upregulated
"FDR<0.05 & logFC<-1" = "#7FB7BE", # Blue for high downregulated
"FDR<0.05 & |logFC| ≤ 1" = "grey50"  # Grey for significant but small effect
)
# Identify top 10 genes (lowest padj) to label
top_genes <- res_df[order(res_df$padj), ][1:10, ]
# Generate volcano plot
volcano_plot <- ggplot(res_df, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(aes(color = sig), alpha = 0.7, size = 2) +
scale_color_manual(values = color_values) +
geom_vline(xintercept = c(-1, 1), linetype = "dashed", color = "grey40") +
labs(
x = "Log2 Fold Change",
y = "-log10(Adjusted p-value)",
color = "Significance",
title = "Volcano Plot of Significant DEGs (FDR < 0.05)"  # Add title here
) +
theme_cowplot() +
ggrepel::geom_text_repel(
data = top_genes,
aes(label = gene),
size = 3,
max.overlaps = 20,
box.padding = 0.5
) +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)  # Center and style title
)
print(volcano_plot)
res_df
# Add significance tiers based on log2FC thresholds (even though res_df is already filtered by padj < 0.05)
res_df <- res05[res05$padj < 0.05 & !is.na(res05$padj), ]
res_df$sig <- "FDR<0.05 & |logFC| ≤ 1"   # Default for significant but small effect
res_df$sig[res_df$log2FoldChange > 1] <- "FDR<0.05 & logFC>1"
res_df$sig[res_df$log2FoldChange < -1] <- "FDR<0.05 & logFC<-1"
res_df$gene <- rownames(res_df)
# Define colors for the categories
color_values <- c(
"FDR<0.05 & logFC>1" = "#BC2C1A",  # Red for high upregulated
"FDR<0.05 & logFC<-1" = "#7FB7BE", # Blue for high downregulated
"FDR<0.05 & |logFC| ≤ 1" = "grey50"  # Grey for significant but small effect
)
# Identify top 10 genes (lowest padj) to label
top_genes <- res_df[order(res_df$padj), ][1:10, ]
# Generate volcano plot
volcano_plot <- ggplot(res_df, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(aes(color = sig), alpha = 0.7, size = 2) +
scale_color_manual(values = color_values) +
geom_vline(xintercept = c(-1, 1), linetype = "dashed", color = "grey40") +
labs(
x = "Log2 Fold Change",
y = "-log10(Adjusted p-value)",
color = "Significance",
title = "Volcano Plot of Significant DEGs (FDR < 0.05)"  # Add title here
) +
theme_cowplot() +
ggrepel::geom_text_repel(
data = top_genes,
aes(label = gene),
size = 3,
max.overlaps = 20,
box.padding = 0.5
) +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5, face = "bold", size = 14)  # Center and style title
)
print(volcano_plot)
#Variance stabilizing transformation
vsd <- vst(dds, blind = FALSE)
topVarGeneNumbers <- head(order(rowVars(assay(vsd)), decreasing = TRUE), 50)
topVarGenes <-rowVars(assay(vsd))[topVarGeneNumbers]
#Normalise with respect to mean:
mat  <- assay(vsd)[ topVarGeneNumbers, ]
mat  <- mat - rowMeans(mat)
anno <- as.data.frame(colData(vsd)[, c("sample_type","gender")])
#Sort genes by expression fold change:
resSig.selected <- resSig[topVarGenes,]
resSig.selected <- resSig.selected[order(resSig.selected$log2FoldChange),]
#Variance stabilizing transformation
vsd <- vst(dds, blind = FALSE)
# Ensure resSig is defined before this point
topVarGeneNumbers <- head(order(rowVars(assay(vsd)), decreasing = TRUE), 50)
topVarGenes <- rowVars(assay(vsd))[topVarGeneNumbers]
# Normalize with respect to mean
mat <- assay(vsd)[topVarGeneNumbers, ]
mat <- mat - rowMeans(mat)
anno <- as.data.frame(colData(vsd)[, c("sample_type", "gender")])
# Sort genes by expression fold change
resSig.selected <- resSig[topVarGenes, ]
resSig.selected <- resSig.selected[order(resSig.selected$log2FoldChange), ]
# define the colours
annoCol<-list(Day=c(d2="#E7D2E1", d3="#7E668C", d4="#8A0089", d5="#330055"),
Condition=c(Control="#C5C5C8",Infected="#6A004A"))
pheatmap(mat, cluster_rows = FALSE,
annotation_col = anno,
annotation_colors = annoCol,
color = colorRampPalette(c("#17255A","white","#BD1E1E"))(100))
#Variance stabilizing transformation
vsd <- vst(dds, blind = FALSE)
# Ensure resSig is defined before this point
topVarGeneNumbers <- head(order(rowVars(assay(vsd)), decreasing = TRUE), 50)
topVarGenes <- rowVars(assay(vsd))[topVarGeneNumbers]
# Normalize with respect to mean
mat <- assay(vsd)[topVarGeneNumbers, ]
mat <- mat - rowMeans(mat)
anno <- as.data.frame(colData(vsd)[, c("sample_type", "gender")])
# Sort genes by expression fold change
resSig <- results(dds, alpha=0.05)  # Create resSig with significant results
resSig.selected <- resSig[topVarGenes, ]
resSig.selected <- resSig.selected[order(resSig.selected$log2FoldChange), ]
# define the colours
annoCol<-list(Day=c(d2="#E7D2E1", d3="#7E668C", d4="#8A0089", d5="#330055"),
Condition=c(Control="#C5C5C8",Infected="#6A004A"))
pheatmap(mat, cluster_rows = FALSE,
annotation_col = anno,
annotation_colors = annoCol,
color = colorRampPalette(c("#17255A","white","#BD1E1E"))(100))
=======
library(Hmisc)
?select
?select
?setnames
?rowSums
Matrix::rowSums
?Matrix::rowSums
?select
library(Hmisc)
?select
?get
?names
?aes
?factor
?unique
library(ensembldb)
browseVignettes("ensembldb")
?lapply
?element_text
?duplicted
?duplicated
?length
?sapply
?as.character
?matrix
?unique
conflicts()
conflicts()
library(BiocGenerics)
conflicts()
?geom_bar_repel
library(ggrepel)
?geom_bar_repel
library(ggplot2)
geom_bar_repel
?geom_bar_repel
?get
?select
?scales
?percent
?unit
library(ggplot2)
?unit
class("hello")
test <- list(1,2,3)
test
for(j in list){
for(j in list){
print(j)
}
for(j in test){
print(j)
}
test <- c(1,2,3)
for(j in test){
print(j)
}
test <- c(4,5,2)
for(a in test){}
for(a in test){
print(a)
}
for(a in seq_along(test)){}
for(a in seq_along(test)){
print(a,names(test)[a])
}
for(a in seq_along(test)){
print(a)
}
for(a in seq_along(test)){
print(paste(a,names(test)[a]))
}
for(a in seq_along(test)){
print(paste(a,names(test)[[a]))
for(a in seq_along(test)){
print(paste(a,names(test)[[a]]))
}
for(a in seq_along(test)){
print(paste0(a,names(test)[[a]]))
}
for(a in seq_along(test)){
print(paste0(a,test[[a]]))
}
?seq_along
for(a in seq_along(test)){
print(paste0(a,test[a]))
}
test[2]
c(10,15,20,30)
a <- c(10,15,20,30)
a[a<4]
a[a<30]
library(glue)
test<-"hi"
paste("hello",test)
paste0("hello",test)
paste0("hello",test,"/")
getwd()
library(qs)
data<-qs::qread("../Desktop/allen_Endo.qs")
data
data
colData(data)
colnames(colData(data))
colData(data)["cell_type"]
getwd()
setwd("../Desktop/")
library(qs)
data <- qs::qread("allen_Endo.qs")
data
data
data[, colData(data)[["cluster_celltype"]]=="Micro"]
data[, colData(data)[["cluster_celltype"]]=="asdf"]
file.path()
file.path("test","ok")
getwd()
# IMPORT PACKAGES
library(devtools)
library(roxygen2)
# DIRECTORY FOR PACKAGE
setwd("C:/Users/salma/Power_Analysis_package")
## TESTING ACTUAL PACKAGE
devtools::document()
#usethis::use_vignette("poweranalysis")
devtools::load_all()
devtools::install()
devtools::check()
devtools::document()
#usethis::use_vignette("poweranalysis")
devtools::load_all()
devtools::install()
devtools::check()
library(qs)
getwd()
data <- qs::qread("vignettes/data/sce.qs")
data
qsave(data,"sce.qs")
getwd()
qsave(data,"../Desktop/sce.qs")
## TESTING ACTUAL PACKAGE
devtools::document()
#usethis::use_vignette("poweranalysis")
devtools::load_all()
devtools::install()
devtools::check()
devtools::check()
devtools::build(vignettes=TRUE)
library(poweranalysis)
vignette(poweranalysis)
vignette("poweranalysis")
vignette(package="poweranalysis")
utils::browseVignettes("poweranalysis")
length(list(1,2,3,4))
length(list(1,2,3,4))*2
file.path("test/ow","to/why")
x<-"hi"
file.path(x,"hello","/no/ok")
file.path(x,"why","no")
?file.path
file.path(1,2,3,4)
file.path("output/path/to/file","filename",0.01)
a_0.01 <- 3
a_0.01
5%%3
7%2
7%%2
isOdd <- function(n){}
isOdd <- function(n){
if(n%%2!=0){
return("Odd!")
}else{
return("Not Odd")
}
}
isOdd(434)
isOdd <- function(n){
if(n%%2!=0){
return("Odd!")
}else{
return("Not Odd!")
}
}
isOdd <- function(n){
if(n%%2!=0){
return(paste0(n,"is odd!"))
}else{
return(paste0(n,"is not odd!"))
}
}
isOdd(434)
isOdd <- function(n){
if(n%%2!=0){
return(paste0(n," is odd!"))
}else{
return(paste0(n," is not odd!"))
}
}
isOdd(434)
test <- c(0.1,0.4,-0.1)
for(p in test){}
getwd()
data
colnames(colData(data))
DEout <- DGE_analysis(data,~sex,"sample_id","cluster_celltype")
power_analysis::DEout <- DGE_analysis(data,~sex,"sample_id","cluster_celltype")
DEout <- power_analysis::DGE_analysis(data,~sex,"sample_id","cluster_celltype")
library(power_analysis)
DEout <- poweranalysis::DGE_analysis(data,~sex,"sample_id","cluster_celltype")
DEout
DEout
sex_chromosome_DEGs <- function(all_genes,
ensemblID_colname="name"){
# check input parameter is fine
if(ensemblID_colname!="name"){
if(!is.character(ensemblID_colname)){
stop("Error: ensemblID_colname should be a string specifying the column name for the column containing ensembl IDs.")
}
}
if(class(all_genes)!="list"){
stop("Error: all_genes should be a list")
}
column_exists <- sapply(all_genes, function(x) ensemblID_colname %in% names(x))
if(!all(column_exists)){
stop("Error: every DGE analysis output in all_genes should contain the column with the name specified by ensemblID_colname")
}
# combine data for all celltypes into one dataframe
combn_genes <- rbindlist(all_genes,idcol="celltype")
# add symbol
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
genes <- unique(as.character(combn_genes$name))
gene_IDs <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","hgnc_symbol","chromosome_name"),
values = genes, mart = mart, useCache = FALSE)
gene_IDs <- as.data.table(gene_IDs)
setnames(gene_IDs,"ensembl_gene_id",ensemblID_colname)
# remove any duplicates from reference set - two names for one ENSEMBL ID
gene_IDs <- unique(gene_IDs,by=ensemblID_colname)
setkey(combn_genes,name)
# append gene names
combn_genes[, gene_name := gene_IDs[combn_genes, on=.(name), x.hgnc_symbol]]
# append chromosome
combn_genes[, chromosome := gene_IDs[combn_genes, on=.(name), x.chromosome_name]]
setorder(combn_genes,celltype,adj_pval,logFC)
# include only genes on the sex chromosomes
sexgenes <- combn_genes[combn_genes$chromosome == "X" | combn_genes$chromosome == "Y"]
# remove unnecessary columns and reshape this as appropriate
sexgenes <- split(sexgenes,sexgenes$celltype)
sexgenes <- sexgenes[[names(sexgenes)]][, c("logFC","logCPM","LR","PValue","adj_pvalue","name")]
# output DGE analysis subset to sex chromosome genes
return(sexgenes)
}
DEout$celltype_DEGs
DEout$celltype_DEGs$Micro
DEout$celltype_DEGs
sex_chromosome_DEGs(DEout$celltype_DEGs$Micro)
sex_chromosome_DEGs(DEout$celltype_DEGs$Micro$name)
sex_chromosome_DEGs(list(DEout$celltype_DEGs$Micro$name))
sex_chromosome_DEGs(DEout$celltype_all_genes)
library(data.table)
sex_chromosome_DEGs(DEout$celltype_all_genes)
library(biomaRt)
sex_chromosome_DEGs(DEout$celltype_all_genes)
sex_chromosome_DEGs(DEout$celltype_all_genes)
data
colnames(colData(data))
colData(data)["cluster_celltype"]
data[["Micro"]]
SCEs <- list(data)
name(data)
names(data)
names(SCEs)
for(study in names(SCEs)){
print(study)
}
for(study in SCEs){
print(study)
}
celltype_correspondence <- list(
"Microglia" = list("micro", "Micro", "microglia"),
"Astrocytes" = list("astro", "Astro", "astrocytes")
)
celltype_correspondence[["Microglia"]]
celltype_correspondence[["Microglia"]][[1]]
celltype_correspondence[["Microglia"]][[2]]
data[, colData(data)[["cluster_celltype"]] == "Micro"]
data[, colData(data)[["cluster_celltype"]] == "poop"]
class(data)
class(data)[[1]]
DEout
names(DEouts)
names(DEou)
names(DEout)
list(1,1,2)
data
df
DEout
getwd()
setwd(~/Desktop)
setwd("../Desktop/")
save(DEout,file="DEout.RData")
if(3==4)
print("no")
else
print("ok")
if(3==4)
print("why")
if(4==2)
if(7==9)
print("no")
if(4==2)
if(7==9)
print("no")
x=TRUE
if(isTrue(x))
print("ok")
if(isTRUE(x))
print("ok")
x=F
if(isTRUE(x))
print("ok")
x=T
if(isTRUE(x))
print("ok")
if(x){}
if(x){
print("why")
}
x
x=T
x
DEout
DEout2<-DEout
test <- list(DEout,DEout2)
names(test)
test
for(i in names(test)){
print(i)
}
test
test <- list(DEout,DEout2)
de1 <- DEout$celltype_all_genes
de2 <- DEout2$celltype_all_genes
test <- list(de1,de2)
for(i in names(test)){
print(i)
}
for(i in names(test)){
print(i)
}
names(de1)
names(de2)
test[[1]]
test <- list(DEout,DEout2)
names(test[[1]]$celltype_all_genes)
x <- list(1,2,3)
is.vector(x)
test <- list(DEout,DEout2)
for(i in seq_along(DEouts)){
# get corresponding cell type names for current study
celltype_name <- celltypes_list[[i]]
# redefine DEouts so each element only contains study/celltype
allstudies[[i]] <- DEouts[[i]]$celltype_all_genes[[celltype_name]]
}
# variable to redefine DEouts
allstudies <- list()
# for each study, select data corresponding only to celltype
for(i in seq_along(test)){
# get corresponding cell type names for current study
#celltype_name <- celltypes_list[[i]]
# redefine DEouts so each element only contains study/celltype
allstudies[[i]] <- test[[i]]$celltype_all_genes[["Micro"]]
}
allstudies
names(allstudies) <- c("data1","data2")
allstudies
# reshape data so "dataset" is now a variable
allstudies_dt <- rbindlist(allstudies,idcol="dataset")
allstudies_dt
unique(allstudies_dt$dataset)
allGenes <- list()
for(j in 1:length(data_names)){
allGenes[[j]] <- allstudies_dt[dataset==data_names[[j]],name]
}
data_names <- c("data1","data2")
allGenes <- list()
for(j in 1:length(data_names)){
allGenes[[j]] <- allstudies_dt[dataset==data_names[[j]],name]
}
allGenes
allGenes[[1]]
allGenes[[2]]
allGenes[[3]]
# get set of genes in all studies
shared_genes <- Reduce(intersect,allGenes)
shared_genes
setkey(allstudies_dt,name)
allstudies_dt <- allstudies_dt[shared_genes]
# select DEGs by specifying only significant genes
genes <- allstudies_dt[dataset==dataset_name & PValue<0.05, name]
# filter to just these genes
allstudies_dt <- allstudies_dt[name %in% genes,]
dataset_name = "data1"
# select DEGs by specifying only significant genes
genes <- allstudies_dt[dataset==dataset_name & PValue<0.05, name]
# filter to just these genes
allstudies_dt <- allstudies_dt[name %in% genes,]
# make matrix for corr() - cols will be [datset, name, logFC]
mat_lfc <- allstudies_dt[,.(dataset,name,logFC)]
# reshape so cols now are [(gene) name, logFC.dataset1, logFC.dataset2,...,logFC.datasetN] (N being length(names(DEouts)))
mat_lfc <-
reshape(mat_lfc, idvar = "name", timevar = "dataset",
direction = "wide")
# remove logFC. from name (now cols are just [name, dataset1, dataset2,...,datasetN] with logFC values in each column)
colnames(mat_lfc)<-
c(colnames(mat_lfc)[1],
substr(colnames(mat_lfc[,2:ncol(mat_lfc)]),
7,nchar(colnames(mat_lfc[,2:ncol(mat_lfc)]))))
# remove NA rows // convert NA to 0s
mat_lfc <- mat_lfc[complete.cases(mat_lfc), ]
# get number of DEGs for this celltype
num_genes <- dim(mat_lfc)[[1]]
print(paste0("Number of ",celltype," genes at given p value is ",num_genes))
genes <- mat_lfc$name # (only updates if we remove NA genes, else is the same as "genes" above)
# get correlation matrix
corr_lfc <- cor(mat_lfc[,2:ncol(mat_lfc)],method = "spearman") #### could also try "pearson"...
# get number of DEGs for this celltype
num_genes <- dim(mat_lfc)[[1]]
print(paste0("Number of ",celltype," genes at given p value is ",num_genes))
genes <- mat_lfc$name # (only updates if we remove NA genes, else is the same as "genes" above)
celltype="Micro"
# get number of DEGs for this celltype
num_genes <- dim(mat_lfc)[[1]]
print(paste0("Number of ",celltype," genes at given p value is ",num_genes))
genes <- mat_lfc$name # (only updates if we remove NA genes, else is the same as "genes" above)
# get correlation matrix
corr_lfc <- cor(mat_lfc[,2:ncol(mat_lfc)],method = "spearman") #### could also try "pearson"...
corr_lfc
celltype_correspondence <- list(
"Microglia" = list("micro", "Micro"),
"Astrocytes" = list("astro", "Astro")
)
celltype_correspondence [["Microglia"]]
celltype_correspondence [["Microglia"]][[1]]
for(celltype in celltype_correspondence){
print(celltype)
}
celltype_correspondence
names(celltype_correspondence)
celltype_correspondence[["Microglia"]]
setwd("../Power_Analysis_package/")
## TESTING ACTUAL PACKAGE
devtools::document()
#usethis::use_vignette("poweranalysis")
devtools::load_all()
devtools::install(build_vignettes=TRUE)
## TESTING ACTUAL PACKAGE
devtools::document()
#usethis::use_vignette("poweranalysis")
devtools::load_all()
devtools::install(build_vignettes=TRUE)
## TESTING ACTUAL PACKAGE
devtools::document()
#usethis::use_vignette("poweranalysis")
devtools::load_all()
devtools::install(build_vignettes=TRUE)
## TESTING ACTUAL PACKAGE
devtools::document()
#usethis::use_vignette("poweranalysis")
devtools::load_all()
devtools::install(build_vignettes=TRUE)
devtools::check()
devtools::load_all()
devtools::document()
devtools::check()
sce<-qs::qread("vignettes/data/sce.qs")
qsave(sce,file=sce.qs)
qsave(sce,file="sce.qs")
qsave(sce,file="vignettes/data/sce.qs")
## TESTING ACTUAL PACKAGE
devtools::load_all()
devtools::document()
devtools::check()
## TESTING ACTUAL PACKAGE
devtools::load_all()
devtools::document()
devtools::check()
## TESTING ACTUAL PACKAGE
devtools::document()
devtools::load_all()
devtools::check()
getwd()
Sys.setFileTime(".", Sys.time())
.rs.restartR()
getwd()
getwd()
## TESTING ACTUAL PACKAGE
devtools::document()
devtools::load_all()
devtools::check()
## TESTING ACTUAL PACKAGE
devtools::document()
#usethis::use_vignette("poweranalysis")
devtools::load_all()
devtools::install()
devtools::document()
#usethis::use_vignette("poweranalysis")
devtools::load_all()
devtools::install(use_vignettes = TRUE)
devtools::install(use_vignette = TRUE)
devtools::check()
system("R CMD build .")
system("R CMD check --as-cran mypackage_*.tar.gz")
>>>>>>> origin/master
