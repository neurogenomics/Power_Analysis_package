% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DGE_analysis.R
\name{DGE_analysis}
\alias{DGE_analysis}
\title{Perform differential expression analysis across cell types based on single cell data with Pseudobulk approach. Returns the results of this differential expression analysis}
\usage{
DGE_analysis(
  SCE,
  design,
  sampleID,
  celltypeID,
  y = NULL,
  region = "single_region",
  coef = NULL,
  control = NULL,
  pval_adjust_method = "BH",
  adj_pval = 0.05,
  output_path = "sc.cell.type.de.graphs/",
  rmv_zero_count_genes = T,
  verbose = F,
  save = F
)
}
\arguments{
\item{SCE}{SingleCellExperiment object, a specialised S4 class for storing data from single-cell experiments. A location of an R, rds or qs file to be loaded can also be passed. If using R objects make sure SCE object saved with the name SCE}

\item{design}{Design formula of class type \code{formula}. Equation used to fit the model- data for the generalised linear model e.g. expression ~ sex + pmi + disease.}

\item{sampleID}{Column name in the SCE object to perform pseudobulk on, usually the patient identifier. This column is used for grouping in the pseudobulk approach}

\item{celltypeID}{Column name in the SCE object for the cell type variable. This is used to identify celltype specific DEGs. If there is only one cell type in the analysis, the analysis will be automatically updated accordingly.}

\item{y}{Column name in the SCE object for the return variable e.g. "diagnosis" - Case or disease. Default is the last variable in the design formula. y can be discrete (logisitc regression) or continuous (linear regression)}

\item{region}{Column name in the SCE object for the study region. If there are multiple regions in the study (for example two brain regions). Pseudobulk values can be derived separately. Default is "single_region" which will not split by region.}

\item{coef}{Character specifying which level to investigate for the differential expression analysis e.g. in a case/control study use "case" if case is the identifier in the y column to get positive fold changes to relate to case samples. leave as default value for continuous y. Default is NULL.}

\item{control}{Character specifying which control level for the differential expression analysis e.g. in a case/control/other study use "control" in the y column to compare against. NOTE only need to specify if more than two groups in y, leave as default value for two groups or continuous y. Default is NULL.}

\item{pval_adjust_method}{Adjustment method for the p-value in the differential expression analysis. Default is benjamini hochberg "BH". See  stats::p.adjust for available options}

\item{adj_pval}{Adjusted p-value cut-off for the differential expression analysis, 0-1 range}

\item{output_path}{Folder where the graphs from the differential expression analysis are saved. Default will create a folder in the current working directory "sc.cell.type.de.graphs". False will skip plotting.}

\item{rmv_zero_count_genes}{Whether genes with no count values in any cell should be removed. Default is TRUE}

\item{verbose}{Logical indicating if extra information about the differential expression analysis should be printed}

\item{save}{Whether or not to save the DE analysis results as an RData file. Default is FALSE (down-sampling/power analysis saves these outputs itself)}
}
\value{
A list containing:
celltype_DEGs: list with the differentially expressed genes (DEGs) for each cell type
celltype_all_genes: list with all genes along with their differential expression scores for each cell type
celltype_counts: vector with the counts of cells after QC in each cell type
}
\description{
Perform differential expression analysis across cell types based on single cell data with Pseudobulk approach. Returns the results of this differential expression analysis
}
\examples{
\dontrun{
# To use the function input the formula of the comparison you want to make along with the names
# of the pseudobulk ID and celltype ID
# If you want to compare disease and control across cell types, taking into account sex use:
#  formula = ~ sex + disease. Firstly load  your SCE object (can otherwise specify location)
library(qs)
library(SingleCellExperiment)
SCE <- qs::qread("sce.qs")
DGE_analysis.return_incl_sex<- DGE_analysis(SCE_small,
design= ~ sex + pathological_diagnosis_original,
sampleID="sample_id", celltypeID="allan_celltype",coef="AD")
# If you only want to also account for other variables as well as sex, such as
# postmortem interval (PMI):
DGE_analysis.return_sex_pmi<- DGE_analysis(SCE_small,
design= ~ sex + PMI + pathological_diagnosis_original,
sampleID="sample_id", celltypeID="allan_celltype",coef="AD")
# If you only want to compare disease and control across cell types w/o any other constraints:
DGE_analysis.return<- DGE_analysis(SCE_small,design= ~ pathological_diagnosis_original,
sampleID="sample_id", celltypeID="allan_celltype",coef="AD")
# A good way to validate the DEG analysis approach is to run a sex comparison
# You would expect genes on the sex chromosomes to be DEGs, this can be done:
DGE_analysis.sex.return<- DGE_analysis(SCE,design= ~ sex,
sampleID="sample_id", celltypeID="allan_celltype",coef="M")
#get gene names of chromosomal DEGs
library('biomaRt')
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
genes <- unique(as.character(our_degs$name))
gene_IDs <- getBM(filters= "ensembl_gene_id",
                  attributes= c("ensembl_gene_id","chromosome_name","hgnc_symbol"),
                  values = genes, mart= mart,useCache = FALSE)
gene_IDs <- as.data.table(gene_IDs)
setnames(gene_IDs,"ensembl_gene_id","name")
DEGs <- data.table::rbindlist(sc.cell.type.de.return$celltype_DEGs,idcol="celltype")
setkey(DEGs,name)
#append gene names
DEGs[, gene_name := gene_IDs[DEGs, on=.(name), x.hgnc_symbol]]
DEGs[, chromosome_name := gene_IDs[DEGs, on=.(name), x.chromosome_name]]
#Xist should be there, key indicator of correct DEG analysis
DEGs[gene_name=="XIST",c("celltype","adj_pval","lfc")]
#Present in all cell types
# There should also be high number of other DEGs on sex chromosomes, check:
our_degs[chromosome_name \%in\% c("X","Y"),
         .N,by=.(celltype,chromosome_name)]
}

# Simple runnable example with bundled data
micro_tsai <- system.file("extdata", "Tsai_Micro.qs", package="poweranalysis")
SCE_tsai <- qs::qread(micro_tsai)
DGE_tsai <- poweranalysis::DGE_analysis(
    SCE_tsai,
    design = ~ sex,
    celltypeID ="cluster_celltype",
    sampleID = "sample_id",
    output_path = tempdir(),
    coef = "M"
)
DGE_tsai
}
